<?php

/*
 * Generated from PCRE.g4 by ANTLR 4.10.1
 */

namespace PCRE {
	use Antlr\Antlr4\Runtime\Atn\ATN;
	use Antlr\Antlr4\Runtime\Atn\ATNDeserializer;
	use Antlr\Antlr4\Runtime\Atn\ParserATNSimulator;
	use Antlr\Antlr4\Runtime\Dfa\DFA;
	use Antlr\Antlr4\Runtime\Error\Exceptions\FailedPredicateException;
	use Antlr\Antlr4\Runtime\Error\Exceptions\NoViableAltException;
	use Antlr\Antlr4\Runtime\PredictionContexts\PredictionContextCache;
	use Antlr\Antlr4\Runtime\Error\Exceptions\RecognitionException;
	use Antlr\Antlr4\Runtime\RuleContext;
	use Antlr\Antlr4\Runtime\Token;
	use Antlr\Antlr4\Runtime\TokenStream;
	use Antlr\Antlr4\Runtime\Vocabulary;
	use Antlr\Antlr4\Runtime\VocabularyImpl;
	use Antlr\Antlr4\Runtime\RuntimeMetaData;
	use Antlr\Antlr4\Runtime\Parser;

	final class PCREParser extends Parser
	{
		public const Quoted = 1, BlockQuoted = 2, BellChar = 3, ControlChar = 4, 
               EscapeChar = 5, FormFeed = 6, NewLine = 7, CarriageReturn = 8, 
               Tab = 9, Backslash = 10, HexChar = 11, Dot = 12, OneDataUnit = 13, 
               DecimalDigit = 14, NotDecimalDigit = 15, HorizontalWhiteSpace = 16, 
               NotHorizontalWhiteSpace = 17, NotNewLine = 18, CharWithProperty = 19, 
               CharWithoutProperty = 20, NewLineSequence = 21, WhiteSpace = 22, 
               NotWhiteSpace = 23, VerticalWhiteSpace = 24, NotVerticalWhiteSpace = 25, 
               WordChar = 26, NotWordChar = 27, ExtendedUnicodeChar = 28, 
               CharacterClassStart = 29, CharacterClassEnd = 30, Caret = 31, 
               Hyphen = 32, POSIXNamedSet = 33, POSIXNegatedNamedSet = 34, 
               QuestionMark = 35, Plus = 36, Star = 37, OpenBrace = 38, 
               CloseBrace = 39, Comma = 40, WordBoundary = 41, NonWordBoundary = 42, 
               StartOfSubject = 43, EndOfSubjectOrLine = 44, EndOfSubjectOrLineEndOfSubject = 45, 
               EndOfSubject = 46, PreviousMatchInSubject = 47, ResetStartMatch = 48, 
               SubroutineOrNamedReferenceStartG = 49, NamedReferenceStartK = 50, 
               Pipe = 51, OpenParen = 52, CloseParen = 53, LessThan = 54, 
               GreaterThan = 55, SingleQuote = 56, Underscore = 57, Colon = 58, 
               Hash = 59, Equals = 60, Exclamation = 61, Ampersand = 62, 
               ALC = 63, BLC = 64, CLC = 65, DLC = 66, ELC = 67, FLC = 68, 
               GLC = 69, HLC = 70, ILC = 71, JLC = 72, KLC = 73, LLC = 74, 
               MLC = 75, NLC = 76, OLC = 77, PLC = 78, QLC = 79, RLC = 80, 
               SLC = 81, TLC = 82, ULC = 83, VLC = 84, WLC = 85, XLC = 86, 
               YLC = 87, ZLC = 88, AUC = 89, BUC = 90, CUC = 91, DUC = 92, 
               EUC = 93, FUC = 94, GUC = 95, HUC = 96, IUC = 97, JUC = 98, 
               KUC = 99, LUC = 100, MUC = 101, NUC = 102, OUC = 103, PUC = 104, 
               QUC = 105, RUC = 106, SUC = 107, TUC = 108, UUC = 109, VUC = 110, 
               WUC = 111, XUC = 112, YUC = 113, ZUC = 114, D1 = 115, D2 = 116, 
               D3 = 117, D4 = 118, D5 = 119, D6 = 120, D7 = 121, D8 = 122, 
               D9 = 123, D0 = 124, OtherChar = 125;

		public const RULE_parse = 0, RULE_alternation = 1, RULE_expr = 2, RULE_element = 3, 
               RULE_quantifier = 4, RULE_quantifier_type = 5, RULE_character_class = 6, 
               RULE_backreference = 7, RULE_backreference_or_octal = 8, 
               RULE_capture = 9, RULE_non_capture = 10, RULE_comment = 11, 
               RULE_option = 12, RULE_option_flags = 13, RULE_option_flag = 14, 
               RULE_look_around = 15, RULE_subroutine_reference = 16, RULE_conditional = 17, 
               RULE_backtrack_control = 18, RULE_newline_convention = 19, 
               RULE_callout = 20, RULE_atom = 21, RULE_cc_atom = 22, RULE_shared_atom = 23, 
               RULE_literal = 24, RULE_cc_literal = 25, RULE_shared_literal = 26, 
               RULE_number = 27, RULE_octal_char = 28, RULE_octal_digit = 29, 
               RULE_digits = 30, RULE_digit = 31, RULE_name = 32, RULE_alpha_nums = 33, 
               RULE_non_close_parens = 34, RULE_non_close_paren = 35, RULE_letter = 36;

		/**
		 * @var array<string>
		 */
		public const RULE_NAMES = [
			'parse', 'alternation', 'expr', 'element', 'quantifier', 'quantifier_type', 
			'character_class', 'backreference', 'backreference_or_octal', 'capture', 
			'non_capture', 'comment', 'option', 'option_flags', 'option_flag', 'look_around', 
			'subroutine_reference', 'conditional', 'backtrack_control', 'newline_convention', 
			'callout', 'atom', 'cc_atom', 'shared_atom', 'literal', 'cc_literal', 
			'shared_literal', 'number', 'octal_char', 'octal_digit', 'digits', 'digit', 
			'name', 'alpha_nums', 'non_close_parens', 'non_close_paren', 'letter'
		];

		/**
		 * @var array<string|null>
		 */
		private const LITERAL_NAMES = [
		    null, null, null, "'\\a'", null, "'\\e'", "'\\f'", "'\\n'", "'\\r'", 
		    "'\\t'", "'\\'", null, "'.'", "'\\C'", "'\\d'", "'\\D'", "'\\h'", 
		    "'\\H'", "'\\N'", null, null, "'\\R'", "'\\s'", "'\\S'", "'\\v'", 
		    "'\\V'", "'\\w'", "'\\W'", "'\\X'", "'['", "']'", "'^'", "'-'", null, 
		    null, "'?'", "'+'", "'*'", "'{'", "'}'", "','", "'\\b'", "'\\B'", 
		    "'\\A'", "'\$'", "'\\Z'", "'\\z'", "'\\G'", "'\\K'", "'\\g'", "'\\k'", 
		    "'|'", "'('", "')'", "'<'", "'>'", "'''", "'_'", "':'", "'#'", "'='", 
		    "'!'", "'&'", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", 
		    "'i'", "'j'", "'k'", "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", 
		    "'s'", "'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'A'", "'B'", 
		    "'C'", "'D'", "'E'", "'F'", "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", 
		    "'M'", "'N'", "'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", 
		    "'W'", "'X'", "'Y'", "'Z'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", 
		    "'7'", "'8'", "'9'", "'0'"
		];

		/**
		 * @var array<string>
		 */
		private const SYMBOLIC_NAMES = [
		    null, "Quoted", "BlockQuoted", "BellChar", "ControlChar", "EscapeChar", 
		    "FormFeed", "NewLine", "CarriageReturn", "Tab", "Backslash", "HexChar", 
		    "Dot", "OneDataUnit", "DecimalDigit", "NotDecimalDigit", "HorizontalWhiteSpace", 
		    "NotHorizontalWhiteSpace", "NotNewLine", "CharWithProperty", "CharWithoutProperty", 
		    "NewLineSequence", "WhiteSpace", "NotWhiteSpace", "VerticalWhiteSpace", 
		    "NotVerticalWhiteSpace", "WordChar", "NotWordChar", "ExtendedUnicodeChar", 
		    "CharacterClassStart", "CharacterClassEnd", "Caret", "Hyphen", "POSIXNamedSet", 
		    "POSIXNegatedNamedSet", "QuestionMark", "Plus", "Star", "OpenBrace", 
		    "CloseBrace", "Comma", "WordBoundary", "NonWordBoundary", "StartOfSubject", 
		    "EndOfSubjectOrLine", "EndOfSubjectOrLineEndOfSubject", "EndOfSubject", 
		    "PreviousMatchInSubject", "ResetStartMatch", "SubroutineOrNamedReferenceStartG", 
		    "NamedReferenceStartK", "Pipe", "OpenParen", "CloseParen", "LessThan", 
		    "GreaterThan", "SingleQuote", "Underscore", "Colon", "Hash", "Equals", 
		    "Exclamation", "Ampersand", "ALC", "BLC", "CLC", "DLC", "ELC", "FLC", 
		    "GLC", "HLC", "ILC", "JLC", "KLC", "LLC", "MLC", "NLC", "OLC", "PLC", 
		    "QLC", "RLC", "SLC", "TLC", "ULC", "VLC", "WLC", "XLC", "YLC", "ZLC", 
		    "AUC", "BUC", "CUC", "DUC", "EUC", "FUC", "GUC", "HUC", "IUC", "JUC", 
		    "KUC", "LUC", "MUC", "NUC", "OUC", "PUC", "QUC", "RUC", "SUC", "TUC", 
		    "UUC", "VUC", "WUC", "XUC", "YUC", "ZUC", "D1", "D2", "D3", "D4", 
		    "D5", "D6", "D7", "D8", "D9", "D0", "OtherChar"
		];

		private const SERIALIZED_ATN =
			[4, 1, 125, 948, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 
		    7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 
		    2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 
		    14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 
		    7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 
		    24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 
		    2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 
		    33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 1, 0, 1, 0, 1, 0, 1, 
		    1, 1, 1, 1, 1, 5, 1, 81, 8, 1, 10, 1, 12, 1, 84, 9, 1, 1, 2, 5, 2, 
		    87, 8, 2, 10, 2, 12, 2, 90, 9, 2, 1, 3, 1, 3, 3, 3, 94, 8, 3, 1, 4, 
		    1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 
		    1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 
		    1, 4, 3, 4, 120, 8, 4, 1, 5, 1, 5, 1, 5, 3, 5, 125, 8, 5, 1, 6, 1, 
		    6, 1, 6, 1, 6, 1, 6, 4, 6, 132, 8, 6, 11, 6, 12, 6, 133, 1, 6, 1, 
		    6, 1, 6, 1, 6, 1, 6, 1, 6, 5, 6, 142, 8, 6, 10, 6, 12, 6, 145, 9, 
		    6, 1, 6, 1, 6, 1, 6, 1, 6, 4, 6, 151, 8, 6, 11, 6, 12, 6, 152, 1, 
		    6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 4, 6, 161, 8, 6, 11, 6, 12, 6, 162, 
		    1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 5, 6, 170, 8, 6, 10, 6, 12, 6, 173, 
		    9, 6, 1, 6, 1, 6, 1, 6, 4, 6, 178, 8, 6, 11, 6, 12, 6, 179, 1, 6, 
		    1, 6, 3, 6, 184, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
		    7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
		    7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
		    7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
		    7, 3, 7, 227, 8, 7, 1, 8, 1, 8, 1, 8, 3, 8, 232, 8, 8, 1, 9, 1, 9, 
		    1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 
		    1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 
		    1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 3, 9, 263, 8, 9, 1, 10, 1, 10, 1, 10, 
		    1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 
		    10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 
		    1, 10, 1, 10, 1, 10, 3, 10, 290, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 
		    1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 
		    12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 
		    1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 
		    12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 
		    1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 
		    12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 
		    352, 8, 12, 1, 13, 4, 13, 355, 8, 13, 11, 13, 12, 13, 356, 1, 14, 
		    1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 
		    15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 
		    1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 387, 
		    8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 
		    16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 
		    1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 
		    16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 
		    1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 
		    16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 
		    1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 
		    16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 
		    1, 16, 1, 16, 1, 16, 3, 16, 467, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 
		    1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 477, 8, 17, 1, 17, 1, 17, 1, 17, 
		    1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 490, 
		    8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 1, 17, 1, 17, 3, 17, 503, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 517, 8, 
		    17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 
		    1, 17, 1, 17, 1, 17, 3, 17, 531, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 
		    1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 544, 8, 17, 
		    1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 3, 17, 556, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 570, 8, 17, 1, 17, 1, 
		    17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 
		    1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 587, 8, 17, 1, 17, 1, 17, 1, 17, 
		    1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 1, 17, 1, 17, 3, 17, 604, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 616, 8, 17, 1, 17, 1, 
		    17, 3, 17, 620, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 
		    18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 
		    637, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 
		    646, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 
		    1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 
		    18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 
		    1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 
		    18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 
		    1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 
		    18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 
		    1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 
		    18, 722, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 
		    19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 
		    1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 
		    19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 
		    1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 
		    19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 
		    1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 785, 8, 19, 1, 20, 
		    1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 
		    20, 797, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 
		    21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 
		    1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 
		    21, 825, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 
		    22, 834, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 
		    23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 
		    1, 23, 1, 23, 3, 23, 855, 8, 23, 1, 24, 1, 24, 3, 24, 859, 8, 24, 
		    1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 
		    25, 1, 25, 1, 25, 3, 25, 873, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 
		    26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 
		    1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 
		    26, 1, 26, 1, 26, 3, 26, 901, 8, 26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 
		    28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 914, 8, 28, 1, 
		    29, 1, 29, 1, 30, 4, 30, 919, 8, 30, 11, 30, 12, 30, 920, 1, 31, 1, 
		    31, 1, 32, 1, 32, 1, 33, 1, 33, 3, 33, 929, 8, 33, 1, 33, 1, 33, 1, 
		    33, 5, 33, 934, 8, 33, 10, 33, 12, 33, 937, 9, 33, 1, 34, 4, 34, 940, 
		    8, 34, 11, 34, 12, 34, 941, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 0, 
		    0, 37, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 
		    32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 
		    66, 68, 70, 72, 0, 6, 6, 0, 71, 71, 75, 75, 81, 81, 86, 86, 98, 98, 
		    109, 109, 2, 0, 115, 117, 124, 124, 2, 0, 115, 121, 124, 124, 1, 0, 
		    115, 124, 1, 0, 53, 53, 1, 0, 63, 114, 1097, 0, 74, 1, 0, 0, 0, 2, 
		    77, 1, 0, 0, 0, 4, 88, 1, 0, 0, 0, 6, 91, 1, 0, 0, 0, 8, 119, 1, 0, 
		    0, 0, 10, 124, 1, 0, 0, 0, 12, 183, 1, 0, 0, 0, 14, 226, 1, 0, 0, 
		    0, 16, 231, 1, 0, 0, 0, 18, 262, 1, 0, 0, 0, 20, 289, 1, 0, 0, 0, 
		    22, 291, 1, 0, 0, 0, 24, 351, 1, 0, 0, 0, 26, 354, 1, 0, 0, 0, 28, 
		    358, 1, 0, 0, 0, 30, 386, 1, 0, 0, 0, 32, 466, 1, 0, 0, 0, 34, 619, 
		    1, 0, 0, 0, 36, 721, 1, 0, 0, 0, 38, 784, 1, 0, 0, 0, 40, 796, 1, 
		    0, 0, 0, 42, 824, 1, 0, 0, 0, 44, 833, 1, 0, 0, 0, 46, 854, 1, 0, 
		    0, 0, 48, 858, 1, 0, 0, 0, 50, 872, 1, 0, 0, 0, 52, 900, 1, 0, 0, 
		    0, 54, 902, 1, 0, 0, 0, 56, 913, 1, 0, 0, 0, 58, 915, 1, 0, 0, 0, 
		    60, 918, 1, 0, 0, 0, 62, 922, 1, 0, 0, 0, 64, 924, 1, 0, 0, 0, 66, 
		    928, 1, 0, 0, 0, 68, 939, 1, 0, 0, 0, 70, 943, 1, 0, 0, 0, 72, 945, 
		    1, 0, 0, 0, 74, 75, 3, 2, 1, 0, 75, 76, 5, 0, 0, 1, 76, 1, 1, 0, 0, 
		    0, 77, 82, 3, 4, 2, 0, 78, 79, 5, 51, 0, 0, 79, 81, 3, 4, 2, 0, 80, 
		    78, 1, 0, 0, 0, 81, 84, 1, 0, 0, 0, 82, 80, 1, 0, 0, 0, 82, 83, 1, 
		    0, 0, 0, 83, 3, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 85, 87, 3, 6, 3, 0, 
		    86, 85, 1, 0, 0, 0, 87, 90, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0, 88, 89, 
		    1, 0, 0, 0, 89, 5, 1, 0, 0, 0, 90, 88, 1, 0, 0, 0, 91, 93, 3, 42, 
		    21, 0, 92, 94, 3, 8, 4, 0, 93, 92, 1, 0, 0, 0, 93, 94, 1, 0, 0, 0, 
		    94, 7, 1, 0, 0, 0, 95, 96, 5, 35, 0, 0, 96, 120, 3, 10, 5, 0, 97, 
		    98, 5, 36, 0, 0, 98, 120, 3, 10, 5, 0, 99, 100, 5, 37, 0, 0, 100, 
		    120, 3, 10, 5, 0, 101, 102, 5, 38, 0, 0, 102, 103, 3, 54, 27, 0, 103, 
		    104, 5, 39, 0, 0, 104, 105, 3, 10, 5, 0, 105, 120, 1, 0, 0, 0, 106, 
		    107, 5, 38, 0, 0, 107, 108, 3, 54, 27, 0, 108, 109, 5, 40, 0, 0, 109, 
		    110, 5, 39, 0, 0, 110, 111, 3, 10, 5, 0, 111, 120, 1, 0, 0, 0, 112, 
		    113, 5, 38, 0, 0, 113, 114, 3, 54, 27, 0, 114, 115, 5, 40, 0, 0, 115, 
		    116, 3, 54, 27, 0, 116, 117, 5, 39, 0, 0, 117, 118, 3, 10, 5, 0, 118, 
		    120, 1, 0, 0, 0, 119, 95, 1, 0, 0, 0, 119, 97, 1, 0, 0, 0, 119, 99, 
		    1, 0, 0, 0, 119, 101, 1, 0, 0, 0, 119, 106, 1, 0, 0, 0, 119, 112, 
		    1, 0, 0, 0, 120, 9, 1, 0, 0, 0, 121, 125, 5, 36, 0, 0, 122, 125, 5, 
		    35, 0, 0, 123, 125, 1, 0, 0, 0, 124, 121, 1, 0, 0, 0, 124, 122, 1, 
		    0, 0, 0, 124, 123, 1, 0, 0, 0, 125, 11, 1, 0, 0, 0, 126, 127, 5, 29, 
		    0, 0, 127, 128, 5, 31, 0, 0, 128, 129, 5, 30, 0, 0, 129, 131, 5, 32, 
		    0, 0, 130, 132, 3, 44, 22, 0, 131, 130, 1, 0, 0, 0, 132, 133, 1, 0, 
		    0, 0, 133, 131, 1, 0, 0, 0, 133, 134, 1, 0, 0, 0, 134, 135, 1, 0, 
		    0, 0, 135, 136, 5, 30, 0, 0, 136, 184, 1, 0, 0, 0, 137, 138, 5, 29, 
		    0, 0, 138, 139, 5, 31, 0, 0, 139, 143, 5, 30, 0, 0, 140, 142, 3, 44, 
		    22, 0, 141, 140, 1, 0, 0, 0, 142, 145, 1, 0, 0, 0, 143, 141, 1, 0, 
		    0, 0, 143, 144, 1, 0, 0, 0, 144, 146, 1, 0, 0, 0, 145, 143, 1, 0, 
		    0, 0, 146, 184, 5, 30, 0, 0, 147, 148, 5, 29, 0, 0, 148, 150, 5, 31, 
		    0, 0, 149, 151, 3, 44, 22, 0, 150, 149, 1, 0, 0, 0, 151, 152, 1, 0, 
		    0, 0, 152, 150, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 154, 1, 0, 
		    0, 0, 154, 155, 5, 30, 0, 0, 155, 184, 1, 0, 0, 0, 156, 157, 5, 29, 
		    0, 0, 157, 158, 5, 30, 0, 0, 158, 160, 5, 32, 0, 0, 159, 161, 3, 44, 
		    22, 0, 160, 159, 1, 0, 0, 0, 161, 162, 1, 0, 0, 0, 162, 160, 1, 0, 
		    0, 0, 162, 163, 1, 0, 0, 0, 163, 164, 1, 0, 0, 0, 164, 165, 5, 30, 
		    0, 0, 165, 184, 1, 0, 0, 0, 166, 167, 5, 29, 0, 0, 167, 171, 5, 30, 
		    0, 0, 168, 170, 3, 44, 22, 0, 169, 168, 1, 0, 0, 0, 170, 173, 1, 0, 
		    0, 0, 171, 169, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 174, 1, 0, 
		    0, 0, 173, 171, 1, 0, 0, 0, 174, 184, 5, 30, 0, 0, 175, 177, 5, 29, 
		    0, 0, 176, 178, 3, 44, 22, 0, 177, 176, 1, 0, 0, 0, 178, 179, 1, 0, 
		    0, 0, 179, 177, 1, 0, 0, 0, 179, 180, 1, 0, 0, 0, 180, 181, 1, 0, 
		    0, 0, 181, 182, 5, 30, 0, 0, 182, 184, 1, 0, 0, 0, 183, 126, 1, 0, 
		    0, 0, 183, 137, 1, 0, 0, 0, 183, 147, 1, 0, 0, 0, 183, 156, 1, 0, 
		    0, 0, 183, 166, 1, 0, 0, 0, 183, 175, 1, 0, 0, 0, 184, 13, 1, 0, 0, 
		    0, 185, 227, 3, 16, 8, 0, 186, 187, 5, 49, 0, 0, 187, 227, 3, 54, 
		    27, 0, 188, 189, 5, 49, 0, 0, 189, 190, 5, 38, 0, 0, 190, 191, 3, 
		    54, 27, 0, 191, 192, 5, 39, 0, 0, 192, 227, 1, 0, 0, 0, 193, 194, 
		    5, 49, 0, 0, 194, 195, 5, 38, 0, 0, 195, 196, 5, 32, 0, 0, 196, 197, 
		    3, 54, 27, 0, 197, 198, 5, 39, 0, 0, 198, 227, 1, 0, 0, 0, 199, 200, 
		    5, 50, 0, 0, 200, 201, 5, 54, 0, 0, 201, 202, 3, 64, 32, 0, 202, 203, 
		    5, 55, 0, 0, 203, 227, 1, 0, 0, 0, 204, 205, 5, 50, 0, 0, 205, 206, 
		    5, 56, 0, 0, 206, 207, 3, 64, 32, 0, 207, 208, 5, 56, 0, 0, 208, 227, 
		    1, 0, 0, 0, 209, 210, 5, 49, 0, 0, 210, 211, 5, 38, 0, 0, 211, 212, 
		    3, 64, 32, 0, 212, 213, 5, 39, 0, 0, 213, 227, 1, 0, 0, 0, 214, 215, 
		    5, 50, 0, 0, 215, 216, 5, 38, 0, 0, 216, 217, 3, 64, 32, 0, 217, 218, 
		    5, 39, 0, 0, 218, 227, 1, 0, 0, 0, 219, 220, 5, 52, 0, 0, 220, 221, 
		    5, 35, 0, 0, 221, 222, 5, 104, 0, 0, 222, 223, 5, 60, 0, 0, 223, 224, 
		    3, 64, 32, 0, 224, 225, 5, 53, 0, 0, 225, 227, 1, 0, 0, 0, 226, 185, 
		    1, 0, 0, 0, 226, 186, 1, 0, 0, 0, 226, 188, 1, 0, 0, 0, 226, 193, 
		    1, 0, 0, 0, 226, 199, 1, 0, 0, 0, 226, 204, 1, 0, 0, 0, 226, 209, 
		    1, 0, 0, 0, 226, 214, 1, 0, 0, 0, 226, 219, 1, 0, 0, 0, 227, 15, 1, 
		    0, 0, 0, 228, 232, 3, 56, 28, 0, 229, 230, 5, 10, 0, 0, 230, 232, 
		    3, 62, 31, 0, 231, 228, 1, 0, 0, 0, 231, 229, 1, 0, 0, 0, 232, 17, 
		    1, 0, 0, 0, 233, 234, 5, 52, 0, 0, 234, 235, 5, 35, 0, 0, 235, 236, 
		    5, 54, 0, 0, 236, 237, 3, 64, 32, 0, 237, 238, 5, 55, 0, 0, 238, 239, 
		    3, 2, 1, 0, 239, 240, 5, 53, 0, 0, 240, 263, 1, 0, 0, 0, 241, 242, 
		    5, 52, 0, 0, 242, 243, 5, 35, 0, 0, 243, 244, 5, 56, 0, 0, 244, 245, 
		    3, 64, 32, 0, 245, 246, 5, 56, 0, 0, 246, 247, 3, 2, 1, 0, 247, 248, 
		    5, 53, 0, 0, 248, 263, 1, 0, 0, 0, 249, 250, 5, 52, 0, 0, 250, 251, 
		    5, 35, 0, 0, 251, 252, 5, 104, 0, 0, 252, 253, 5, 54, 0, 0, 253, 254, 
		    3, 64, 32, 0, 254, 255, 5, 55, 0, 0, 255, 256, 3, 2, 1, 0, 256, 257, 
		    5, 53, 0, 0, 257, 263, 1, 0, 0, 0, 258, 259, 5, 52, 0, 0, 259, 260, 
		    3, 2, 1, 0, 260, 261, 5, 53, 0, 0, 261, 263, 1, 0, 0, 0, 262, 233, 
		    1, 0, 0, 0, 262, 241, 1, 0, 0, 0, 262, 249, 1, 0, 0, 0, 262, 258, 
		    1, 0, 0, 0, 263, 19, 1, 0, 0, 0, 264, 265, 5, 52, 0, 0, 265, 266, 
		    5, 35, 0, 0, 266, 267, 5, 58, 0, 0, 267, 268, 3, 2, 1, 0, 268, 269, 
		    5, 53, 0, 0, 269, 290, 1, 0, 0, 0, 270, 271, 5, 52, 0, 0, 271, 272, 
		    5, 35, 0, 0, 272, 273, 5, 51, 0, 0, 273, 274, 3, 2, 1, 0, 274, 275, 
		    5, 53, 0, 0, 275, 290, 1, 0, 0, 0, 276, 277, 5, 52, 0, 0, 277, 278, 
		    5, 35, 0, 0, 278, 279, 5, 55, 0, 0, 279, 280, 3, 2, 1, 0, 280, 281, 
		    5, 53, 0, 0, 281, 290, 1, 0, 0, 0, 282, 283, 5, 52, 0, 0, 283, 284, 
		    5, 35, 0, 0, 284, 285, 3, 26, 13, 0, 285, 286, 5, 58, 0, 0, 286, 287, 
		    3, 2, 1, 0, 287, 288, 5, 53, 0, 0, 288, 290, 1, 0, 0, 0, 289, 264, 
		    1, 0, 0, 0, 289, 270, 1, 0, 0, 0, 289, 276, 1, 0, 0, 0, 289, 282, 
		    1, 0, 0, 0, 290, 21, 1, 0, 0, 0, 291, 292, 5, 52, 0, 0, 292, 293, 
		    5, 35, 0, 0, 293, 294, 5, 59, 0, 0, 294, 295, 3, 68, 34, 0, 295, 296, 
		    5, 53, 0, 0, 296, 23, 1, 0, 0, 0, 297, 298, 5, 52, 0, 0, 298, 299, 
		    5, 35, 0, 0, 299, 300, 3, 26, 13, 0, 300, 301, 5, 32, 0, 0, 301, 302, 
		    3, 26, 13, 0, 302, 303, 5, 53, 0, 0, 303, 352, 1, 0, 0, 0, 304, 305, 
		    5, 52, 0, 0, 305, 306, 5, 35, 0, 0, 306, 307, 3, 26, 13, 0, 307, 308, 
		    5, 53, 0, 0, 308, 352, 1, 0, 0, 0, 309, 310, 5, 52, 0, 0, 310, 311, 
		    5, 35, 0, 0, 311, 312, 5, 32, 0, 0, 312, 313, 3, 26, 13, 0, 313, 314, 
		    5, 53, 0, 0, 314, 352, 1, 0, 0, 0, 315, 316, 5, 52, 0, 0, 316, 317, 
		    5, 37, 0, 0, 317, 318, 5, 102, 0, 0, 318, 319, 5, 103, 0, 0, 319, 
		    320, 5, 57, 0, 0, 320, 321, 5, 107, 0, 0, 321, 322, 5, 108, 0, 0, 
		    322, 323, 5, 89, 0, 0, 323, 324, 5, 106, 0, 0, 324, 325, 5, 108, 0, 
		    0, 325, 326, 5, 57, 0, 0, 326, 327, 5, 103, 0, 0, 327, 328, 5, 104, 
		    0, 0, 328, 329, 5, 108, 0, 0, 329, 352, 5, 53, 0, 0, 330, 331, 5, 
		    52, 0, 0, 331, 332, 5, 37, 0, 0, 332, 333, 5, 109, 0, 0, 333, 334, 
		    5, 108, 0, 0, 334, 335, 5, 94, 0, 0, 335, 336, 5, 122, 0, 0, 336, 
		    352, 5, 53, 0, 0, 337, 338, 5, 52, 0, 0, 338, 339, 5, 37, 0, 0, 339, 
		    340, 5, 109, 0, 0, 340, 341, 5, 108, 0, 0, 341, 342, 5, 94, 0, 0, 
		    342, 343, 5, 115, 0, 0, 343, 344, 5, 120, 0, 0, 344, 352, 5, 53, 0, 
		    0, 345, 346, 5, 52, 0, 0, 346, 347, 5, 37, 0, 0, 347, 348, 5, 109, 
		    0, 0, 348, 349, 5, 91, 0, 0, 349, 350, 5, 104, 0, 0, 350, 352, 5, 
		    53, 0, 0, 351, 297, 1, 0, 0, 0, 351, 304, 1, 0, 0, 0, 351, 309, 1, 
		    0, 0, 0, 351, 315, 1, 0, 0, 0, 351, 330, 1, 0, 0, 0, 351, 337, 1, 
		    0, 0, 0, 351, 345, 1, 0, 0, 0, 352, 25, 1, 0, 0, 0, 353, 355, 3, 28, 
		    14, 0, 354, 353, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 354, 1, 0, 
		    0, 0, 356, 357, 1, 0, 0, 0, 357, 27, 1, 0, 0, 0, 358, 359, 7, 0, 0, 
		    0, 359, 29, 1, 0, 0, 0, 360, 361, 5, 52, 0, 0, 361, 362, 5, 35, 0, 
		    0, 362, 363, 5, 60, 0, 0, 363, 364, 3, 2, 1, 0, 364, 365, 5, 53, 0, 
		    0, 365, 387, 1, 0, 0, 0, 366, 367, 5, 52, 0, 0, 367, 368, 5, 35, 0, 
		    0, 368, 369, 5, 61, 0, 0, 369, 370, 3, 2, 1, 0, 370, 371, 5, 53, 0, 
		    0, 371, 387, 1, 0, 0, 0, 372, 373, 5, 52, 0, 0, 373, 374, 5, 35, 0, 
		    0, 374, 375, 5, 54, 0, 0, 375, 376, 5, 60, 0, 0, 376, 377, 3, 2, 1, 
		    0, 377, 378, 5, 53, 0, 0, 378, 387, 1, 0, 0, 0, 379, 380, 5, 52, 0, 
		    0, 380, 381, 5, 35, 0, 0, 381, 382, 5, 54, 0, 0, 382, 383, 5, 61, 
		    0, 0, 383, 384, 3, 2, 1, 0, 384, 385, 5, 53, 0, 0, 385, 387, 1, 0, 
		    0, 0, 386, 360, 1, 0, 0, 0, 386, 366, 1, 0, 0, 0, 386, 372, 1, 0, 
		    0, 0, 386, 379, 1, 0, 0, 0, 387, 31, 1, 0, 0, 0, 388, 389, 5, 52, 
		    0, 0, 389, 390, 5, 35, 0, 0, 390, 391, 5, 106, 0, 0, 391, 467, 5, 
		    53, 0, 0, 392, 393, 5, 52, 0, 0, 393, 394, 5, 35, 0, 0, 394, 395, 
		    3, 54, 27, 0, 395, 396, 5, 53, 0, 0, 396, 467, 1, 0, 0, 0, 397, 398, 
		    5, 52, 0, 0, 398, 399, 5, 35, 0, 0, 399, 400, 5, 36, 0, 0, 400, 401, 
		    3, 54, 27, 0, 401, 402, 5, 53, 0, 0, 402, 467, 1, 0, 0, 0, 403, 404, 
		    5, 52, 0, 0, 404, 405, 5, 35, 0, 0, 405, 406, 5, 32, 0, 0, 406, 407, 
		    3, 54, 27, 0, 407, 408, 5, 53, 0, 0, 408, 467, 1, 0, 0, 0, 409, 410, 
		    5, 52, 0, 0, 410, 411, 5, 35, 0, 0, 411, 412, 5, 62, 0, 0, 412, 413, 
		    3, 64, 32, 0, 413, 414, 5, 53, 0, 0, 414, 467, 1, 0, 0, 0, 415, 416, 
		    5, 52, 0, 0, 416, 417, 5, 35, 0, 0, 417, 418, 5, 104, 0, 0, 418, 419, 
		    5, 55, 0, 0, 419, 420, 3, 64, 32, 0, 420, 421, 5, 53, 0, 0, 421, 467, 
		    1, 0, 0, 0, 422, 423, 5, 49, 0, 0, 423, 424, 5, 54, 0, 0, 424, 425, 
		    3, 64, 32, 0, 425, 426, 5, 55, 0, 0, 426, 467, 1, 0, 0, 0, 427, 428, 
		    5, 49, 0, 0, 428, 429, 5, 56, 0, 0, 429, 430, 3, 64, 32, 0, 430, 431, 
		    5, 56, 0, 0, 431, 467, 1, 0, 0, 0, 432, 433, 5, 49, 0, 0, 433, 434, 
		    5, 54, 0, 0, 434, 435, 3, 54, 27, 0, 435, 436, 5, 55, 0, 0, 436, 467, 
		    1, 0, 0, 0, 437, 438, 5, 49, 0, 0, 438, 439, 5, 56, 0, 0, 439, 440, 
		    3, 54, 27, 0, 440, 441, 5, 56, 0, 0, 441, 467, 1, 0, 0, 0, 442, 443, 
		    5, 49, 0, 0, 443, 444, 5, 54, 0, 0, 444, 445, 5, 36, 0, 0, 445, 446, 
		    3, 54, 27, 0, 446, 447, 5, 55, 0, 0, 447, 467, 1, 0, 0, 0, 448, 449, 
		    5, 49, 0, 0, 449, 450, 5, 56, 0, 0, 450, 451, 5, 36, 0, 0, 451, 452, 
		    3, 54, 27, 0, 452, 453, 5, 56, 0, 0, 453, 467, 1, 0, 0, 0, 454, 455, 
		    5, 49, 0, 0, 455, 456, 5, 54, 0, 0, 456, 457, 5, 32, 0, 0, 457, 458, 
		    3, 54, 27, 0, 458, 459, 5, 55, 0, 0, 459, 467, 1, 0, 0, 0, 460, 461, 
		    5, 49, 0, 0, 461, 462, 5, 56, 0, 0, 462, 463, 5, 32, 0, 0, 463, 464, 
		    3, 54, 27, 0, 464, 465, 5, 56, 0, 0, 465, 467, 1, 0, 0, 0, 466, 388, 
		    1, 0, 0, 0, 466, 392, 1, 0, 0, 0, 466, 397, 1, 0, 0, 0, 466, 403, 
		    1, 0, 0, 0, 466, 409, 1, 0, 0, 0, 466, 415, 1, 0, 0, 0, 466, 422, 
		    1, 0, 0, 0, 466, 427, 1, 0, 0, 0, 466, 432, 1, 0, 0, 0, 466, 437, 
		    1, 0, 0, 0, 466, 442, 1, 0, 0, 0, 466, 448, 1, 0, 0, 0, 466, 454, 
		    1, 0, 0, 0, 466, 460, 1, 0, 0, 0, 467, 33, 1, 0, 0, 0, 468, 469, 5, 
		    52, 0, 0, 469, 470, 5, 35, 0, 0, 470, 471, 5, 52, 0, 0, 471, 472, 
		    3, 54, 27, 0, 472, 473, 5, 53, 0, 0, 473, 476, 3, 2, 1, 0, 474, 475, 
		    5, 51, 0, 0, 475, 477, 3, 2, 1, 0, 476, 474, 1, 0, 0, 0, 476, 477, 
		    1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 479, 5, 53, 0, 0, 479, 620, 
		    1, 0, 0, 0, 480, 481, 5, 52, 0, 0, 481, 482, 5, 35, 0, 0, 482, 483, 
		    5, 52, 0, 0, 483, 484, 5, 36, 0, 0, 484, 485, 3, 54, 27, 0, 485, 486, 
		    5, 53, 0, 0, 486, 489, 3, 2, 1, 0, 487, 488, 5, 51, 0, 0, 488, 490, 
		    3, 2, 1, 0, 489, 487, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0, 490, 491, 
		    1, 0, 0, 0, 491, 492, 5, 53, 0, 0, 492, 620, 1, 0, 0, 0, 493, 494, 
		    5, 52, 0, 0, 494, 495, 5, 35, 0, 0, 495, 496, 5, 52, 0, 0, 496, 497, 
		    5, 32, 0, 0, 497, 498, 3, 54, 27, 0, 498, 499, 5, 53, 0, 0, 499, 502, 
		    3, 2, 1, 0, 500, 501, 5, 51, 0, 0, 501, 503, 3, 2, 1, 0, 502, 500, 
		    1, 0, 0, 0, 502, 503, 1, 0, 0, 0, 503, 504, 1, 0, 0, 0, 504, 505, 
		    5, 53, 0, 0, 505, 620, 1, 0, 0, 0, 506, 507, 5, 52, 0, 0, 507, 508, 
		    5, 35, 0, 0, 508, 509, 5, 52, 0, 0, 509, 510, 5, 54, 0, 0, 510, 511, 
		    3, 64, 32, 0, 511, 512, 5, 55, 0, 0, 512, 513, 5, 53, 0, 0, 513, 516, 
		    3, 2, 1, 0, 514, 515, 5, 51, 0, 0, 515, 517, 3, 2, 1, 0, 516, 514, 
		    1, 0, 0, 0, 516, 517, 1, 0, 0, 0, 517, 518, 1, 0, 0, 0, 518, 519, 
		    5, 53, 0, 0, 519, 620, 1, 0, 0, 0, 520, 521, 5, 52, 0, 0, 521, 522, 
		    5, 35, 0, 0, 522, 523, 5, 52, 0, 0, 523, 524, 5, 56, 0, 0, 524, 525, 
		    3, 64, 32, 0, 525, 526, 5, 56, 0, 0, 526, 527, 5, 53, 0, 0, 527, 530, 
		    3, 2, 1, 0, 528, 529, 5, 51, 0, 0, 529, 531, 3, 2, 1, 0, 530, 528, 
		    1, 0, 0, 0, 530, 531, 1, 0, 0, 0, 531, 532, 1, 0, 0, 0, 532, 533, 
		    5, 53, 0, 0, 533, 620, 1, 0, 0, 0, 534, 535, 5, 52, 0, 0, 535, 536, 
		    5, 35, 0, 0, 536, 537, 5, 52, 0, 0, 537, 538, 5, 106, 0, 0, 538, 539, 
		    3, 54, 27, 0, 539, 540, 5, 53, 0, 0, 540, 543, 3, 2, 1, 0, 541, 542, 
		    5, 51, 0, 0, 542, 544, 3, 2, 1, 0, 543, 541, 1, 0, 0, 0, 543, 544, 
		    1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 546, 5, 53, 0, 0, 546, 620, 
		    1, 0, 0, 0, 547, 548, 5, 52, 0, 0, 548, 549, 5, 35, 0, 0, 549, 550, 
		    5, 52, 0, 0, 550, 551, 5, 106, 0, 0, 551, 552, 5, 53, 0, 0, 552, 555, 
		    3, 2, 1, 0, 553, 554, 5, 51, 0, 0, 554, 556, 3, 2, 1, 0, 555, 553, 
		    1, 0, 0, 0, 555, 556, 1, 0, 0, 0, 556, 557, 1, 0, 0, 0, 557, 558, 
		    5, 53, 0, 0, 558, 620, 1, 0, 0, 0, 559, 560, 5, 52, 0, 0, 560, 561, 
		    5, 35, 0, 0, 561, 562, 5, 52, 0, 0, 562, 563, 5, 106, 0, 0, 563, 564, 
		    5, 62, 0, 0, 564, 565, 3, 64, 32, 0, 565, 566, 5, 53, 0, 0, 566, 569, 
		    3, 2, 1, 0, 567, 568, 5, 51, 0, 0, 568, 570, 3, 2, 1, 0, 569, 567, 
		    1, 0, 0, 0, 569, 570, 1, 0, 0, 0, 570, 571, 1, 0, 0, 0, 571, 572, 
		    5, 53, 0, 0, 572, 620, 1, 0, 0, 0, 573, 574, 5, 52, 0, 0, 574, 575, 
		    5, 35, 0, 0, 575, 576, 5, 52, 0, 0, 576, 577, 5, 92, 0, 0, 577, 578, 
		    5, 93, 0, 0, 578, 579, 5, 94, 0, 0, 579, 580, 5, 97, 0, 0, 580, 581, 
		    5, 102, 0, 0, 581, 582, 5, 93, 0, 0, 582, 583, 5, 53, 0, 0, 583, 586, 
		    3, 2, 1, 0, 584, 585, 5, 51, 0, 0, 585, 587, 3, 2, 1, 0, 586, 584, 
		    1, 0, 0, 0, 586, 587, 1, 0, 0, 0, 587, 588, 1, 0, 0, 0, 588, 589, 
		    5, 53, 0, 0, 589, 620, 1, 0, 0, 0, 590, 591, 5, 52, 0, 0, 591, 592, 
		    5, 35, 0, 0, 592, 593, 5, 52, 0, 0, 593, 594, 5, 63, 0, 0, 594, 595, 
		    5, 81, 0, 0, 595, 596, 5, 81, 0, 0, 596, 597, 5, 67, 0, 0, 597, 598, 
		    5, 80, 0, 0, 598, 599, 5, 82, 0, 0, 599, 600, 5, 53, 0, 0, 600, 603, 
		    3, 2, 1, 0, 601, 602, 5, 51, 0, 0, 602, 604, 3, 2, 1, 0, 603, 601, 
		    1, 0, 0, 0, 603, 604, 1, 0, 0, 0, 604, 605, 1, 0, 0, 0, 605, 606, 
		    5, 53, 0, 0, 606, 620, 1, 0, 0, 0, 607, 608, 5, 52, 0, 0, 608, 609, 
		    5, 35, 0, 0, 609, 610, 5, 52, 0, 0, 610, 611, 3, 64, 32, 0, 611, 612, 
		    5, 53, 0, 0, 612, 615, 3, 2, 1, 0, 613, 614, 5, 51, 0, 0, 614, 616, 
		    3, 2, 1, 0, 615, 613, 1, 0, 0, 0, 615, 616, 1, 0, 0, 0, 616, 617, 
		    1, 0, 0, 0, 617, 618, 5, 53, 0, 0, 618, 620, 1, 0, 0, 0, 619, 468, 
		    1, 0, 0, 0, 619, 480, 1, 0, 0, 0, 619, 493, 1, 0, 0, 0, 619, 506, 
		    1, 0, 0, 0, 619, 520, 1, 0, 0, 0, 619, 534, 1, 0, 0, 0, 619, 547, 
		    1, 0, 0, 0, 619, 559, 1, 0, 0, 0, 619, 573, 1, 0, 0, 0, 619, 590, 
		    1, 0, 0, 0, 619, 607, 1, 0, 0, 0, 620, 35, 1, 0, 0, 0, 621, 622, 5, 
		    52, 0, 0, 622, 623, 5, 37, 0, 0, 623, 624, 5, 89, 0, 0, 624, 625, 
		    5, 91, 0, 0, 625, 626, 5, 91, 0, 0, 626, 627, 5, 93, 0, 0, 627, 628, 
		    5, 104, 0, 0, 628, 629, 5, 108, 0, 0, 629, 722, 5, 53, 0, 0, 630, 
		    631, 5, 52, 0, 0, 631, 632, 5, 37, 0, 0, 632, 636, 5, 94, 0, 0, 633, 
		    634, 5, 89, 0, 0, 634, 635, 5, 97, 0, 0, 635, 637, 5, 100, 0, 0, 636, 
		    633, 1, 0, 0, 0, 636, 637, 1, 0, 0, 0, 637, 638, 1, 0, 0, 0, 638, 
		    722, 5, 53, 0, 0, 639, 640, 5, 52, 0, 0, 640, 645, 5, 37, 0, 0, 641, 
		    642, 5, 101, 0, 0, 642, 643, 5, 89, 0, 0, 643, 644, 5, 106, 0, 0, 
		    644, 646, 5, 99, 0, 0, 645, 641, 1, 0, 0, 0, 645, 646, 1, 0, 0, 0, 
		    646, 647, 1, 0, 0, 0, 647, 648, 5, 58, 0, 0, 648, 649, 5, 102, 0, 
		    0, 649, 650, 5, 89, 0, 0, 650, 651, 5, 101, 0, 0, 651, 652, 5, 93, 
		    0, 0, 652, 722, 5, 53, 0, 0, 653, 654, 5, 52, 0, 0, 654, 655, 5, 37, 
		    0, 0, 655, 656, 5, 91, 0, 0, 656, 657, 5, 103, 0, 0, 657, 658, 5, 
		    101, 0, 0, 658, 659, 5, 101, 0, 0, 659, 660, 5, 97, 0, 0, 660, 661, 
		    5, 108, 0, 0, 661, 722, 5, 53, 0, 0, 662, 663, 5, 52, 0, 0, 663, 664, 
		    5, 37, 0, 0, 664, 665, 5, 104, 0, 0, 665, 666, 5, 106, 0, 0, 666, 
		    667, 5, 109, 0, 0, 667, 668, 5, 102, 0, 0, 668, 669, 5, 93, 0, 0, 
		    669, 722, 5, 53, 0, 0, 670, 671, 5, 52, 0, 0, 671, 672, 5, 37, 0, 
		    0, 672, 673, 5, 104, 0, 0, 673, 674, 5, 106, 0, 0, 674, 675, 5, 109, 
		    0, 0, 675, 676, 5, 102, 0, 0, 676, 677, 5, 93, 0, 0, 677, 678, 5, 
		    58, 0, 0, 678, 679, 5, 102, 0, 0, 679, 680, 5, 89, 0, 0, 680, 681, 
		    5, 101, 0, 0, 681, 682, 5, 93, 0, 0, 682, 722, 5, 53, 0, 0, 683, 684, 
		    5, 52, 0, 0, 684, 685, 5, 37, 0, 0, 685, 686, 5, 107, 0, 0, 686, 687, 
		    5, 99, 0, 0, 687, 688, 5, 97, 0, 0, 688, 689, 5, 104, 0, 0, 689, 722, 
		    5, 53, 0, 0, 690, 691, 5, 52, 0, 0, 691, 692, 5, 37, 0, 0, 692, 693, 
		    5, 107, 0, 0, 693, 694, 5, 99, 0, 0, 694, 695, 5, 97, 0, 0, 695, 696, 
		    5, 104, 0, 0, 696, 697, 5, 58, 0, 0, 697, 698, 5, 102, 0, 0, 698, 
		    699, 5, 89, 0, 0, 699, 700, 5, 101, 0, 0, 700, 701, 5, 93, 0, 0, 701, 
		    722, 5, 53, 0, 0, 702, 703, 5, 52, 0, 0, 703, 704, 5, 37, 0, 0, 704, 
		    705, 5, 108, 0, 0, 705, 706, 5, 96, 0, 0, 706, 707, 5, 93, 0, 0, 707, 
		    708, 5, 102, 0, 0, 708, 722, 5, 53, 0, 0, 709, 710, 5, 52, 0, 0, 710, 
		    711, 5, 37, 0, 0, 711, 712, 5, 108, 0, 0, 712, 713, 5, 96, 0, 0, 713, 
		    714, 5, 93, 0, 0, 714, 715, 5, 102, 0, 0, 715, 716, 5, 58, 0, 0, 716, 
		    717, 5, 102, 0, 0, 717, 718, 5, 89, 0, 0, 718, 719, 5, 101, 0, 0, 
		    719, 720, 5, 93, 0, 0, 720, 722, 5, 53, 0, 0, 721, 621, 1, 0, 0, 0, 
		    721, 630, 1, 0, 0, 0, 721, 639, 1, 0, 0, 0, 721, 653, 1, 0, 0, 0, 
		    721, 662, 1, 0, 0, 0, 721, 670, 1, 0, 0, 0, 721, 683, 1, 0, 0, 0, 
		    721, 690, 1, 0, 0, 0, 721, 702, 1, 0, 0, 0, 721, 709, 1, 0, 0, 0, 
		    722, 37, 1, 0, 0, 0, 723, 724, 5, 52, 0, 0, 724, 725, 5, 37, 0, 0, 
		    725, 726, 5, 91, 0, 0, 726, 727, 5, 106, 0, 0, 727, 785, 5, 53, 0, 
		    0, 728, 729, 5, 52, 0, 0, 729, 730, 5, 37, 0, 0, 730, 731, 5, 100, 
		    0, 0, 731, 732, 5, 94, 0, 0, 732, 785, 5, 53, 0, 0, 733, 734, 5, 52, 
		    0, 0, 734, 735, 5, 37, 0, 0, 735, 736, 5, 91, 0, 0, 736, 737, 5, 106, 
		    0, 0, 737, 738, 5, 100, 0, 0, 738, 739, 5, 94, 0, 0, 739, 785, 5, 
		    53, 0, 0, 740, 741, 5, 52, 0, 0, 741, 742, 5, 37, 0, 0, 742, 743, 
		    5, 89, 0, 0, 743, 744, 5, 102, 0, 0, 744, 745, 5, 113, 0, 0, 745, 
		    746, 5, 91, 0, 0, 746, 747, 5, 106, 0, 0, 747, 748, 5, 100, 0, 0, 
		    748, 749, 5, 94, 0, 0, 749, 785, 5, 53, 0, 0, 750, 751, 5, 52, 0, 
		    0, 751, 752, 5, 37, 0, 0, 752, 753, 5, 89, 0, 0, 753, 754, 5, 102, 
		    0, 0, 754, 755, 5, 113, 0, 0, 755, 785, 5, 53, 0, 0, 756, 757, 5, 
		    52, 0, 0, 757, 758, 5, 37, 0, 0, 758, 759, 5, 90, 0, 0, 759, 760, 
		    5, 107, 0, 0, 760, 761, 5, 106, 0, 0, 761, 762, 5, 57, 0, 0, 762, 
		    763, 5, 89, 0, 0, 763, 764, 5, 102, 0, 0, 764, 765, 5, 113, 0, 0, 
		    765, 766, 5, 91, 0, 0, 766, 767, 5, 106, 0, 0, 767, 768, 5, 100, 0, 
		    0, 768, 769, 5, 94, 0, 0, 769, 785, 5, 53, 0, 0, 770, 771, 5, 52, 
		    0, 0, 771, 772, 5, 37, 0, 0, 772, 773, 5, 90, 0, 0, 773, 774, 5, 107, 
		    0, 0, 774, 775, 5, 106, 0, 0, 775, 776, 5, 57, 0, 0, 776, 777, 5, 
		    109, 0, 0, 777, 778, 5, 102, 0, 0, 778, 779, 5, 97, 0, 0, 779, 780, 
		    5, 91, 0, 0, 780, 781, 5, 103, 0, 0, 781, 782, 5, 92, 0, 0, 782, 783, 
		    5, 93, 0, 0, 783, 785, 5, 53, 0, 0, 784, 723, 1, 0, 0, 0, 784, 728, 
		    1, 0, 0, 0, 784, 733, 1, 0, 0, 0, 784, 740, 1, 0, 0, 0, 784, 750, 
		    1, 0, 0, 0, 784, 756, 1, 0, 0, 0, 784, 770, 1, 0, 0, 0, 785, 39, 1, 
		    0, 0, 0, 786, 787, 5, 52, 0, 0, 787, 788, 5, 35, 0, 0, 788, 789, 5, 
		    91, 0, 0, 789, 797, 5, 53, 0, 0, 790, 791, 5, 52, 0, 0, 791, 792, 
		    5, 35, 0, 0, 792, 793, 5, 91, 0, 0, 793, 794, 3, 54, 27, 0, 794, 795, 
		    5, 53, 0, 0, 795, 797, 1, 0, 0, 0, 796, 786, 1, 0, 0, 0, 796, 790, 
		    1, 0, 0, 0, 797, 41, 1, 0, 0, 0, 798, 825, 3, 32, 16, 0, 799, 825, 
		    3, 46, 23, 0, 800, 825, 3, 48, 24, 0, 801, 825, 3, 12, 6, 0, 802, 
		    825, 3, 18, 9, 0, 803, 825, 3, 20, 10, 0, 804, 825, 3, 22, 11, 0, 
		    805, 825, 3, 24, 12, 0, 806, 825, 3, 30, 15, 0, 807, 825, 3, 14, 7, 
		    0, 808, 825, 3, 34, 17, 0, 809, 825, 3, 36, 18, 0, 810, 825, 3, 38, 
		    19, 0, 811, 825, 3, 40, 20, 0, 812, 825, 5, 12, 0, 0, 813, 825, 5, 
		    31, 0, 0, 814, 825, 5, 43, 0, 0, 815, 825, 5, 41, 0, 0, 816, 825, 
		    5, 42, 0, 0, 817, 825, 5, 44, 0, 0, 818, 825, 5, 45, 0, 0, 819, 825, 
		    5, 46, 0, 0, 820, 825, 5, 47, 0, 0, 821, 825, 5, 48, 0, 0, 822, 825, 
		    5, 13, 0, 0, 823, 825, 5, 28, 0, 0, 824, 798, 1, 0, 0, 0, 824, 799, 
		    1, 0, 0, 0, 824, 800, 1, 0, 0, 0, 824, 801, 1, 0, 0, 0, 824, 802, 
		    1, 0, 0, 0, 824, 803, 1, 0, 0, 0, 824, 804, 1, 0, 0, 0, 824, 805, 
		    1, 0, 0, 0, 824, 806, 1, 0, 0, 0, 824, 807, 1, 0, 0, 0, 824, 808, 
		    1, 0, 0, 0, 824, 809, 1, 0, 0, 0, 824, 810, 1, 0, 0, 0, 824, 811, 
		    1, 0, 0, 0, 824, 812, 1, 0, 0, 0, 824, 813, 1, 0, 0, 0, 824, 814, 
		    1, 0, 0, 0, 824, 815, 1, 0, 0, 0, 824, 816, 1, 0, 0, 0, 824, 817, 
		    1, 0, 0, 0, 824, 818, 1, 0, 0, 0, 824, 819, 1, 0, 0, 0, 824, 820, 
		    1, 0, 0, 0, 824, 821, 1, 0, 0, 0, 824, 822, 1, 0, 0, 0, 824, 823, 
		    1, 0, 0, 0, 825, 43, 1, 0, 0, 0, 826, 827, 3, 50, 25, 0, 827, 828, 
		    5, 32, 0, 0, 828, 829, 3, 50, 25, 0, 829, 834, 1, 0, 0, 0, 830, 834, 
		    3, 46, 23, 0, 831, 834, 3, 50, 25, 0, 832, 834, 3, 16, 8, 0, 833, 
		    826, 1, 0, 0, 0, 833, 830, 1, 0, 0, 0, 833, 831, 1, 0, 0, 0, 833, 
		    832, 1, 0, 0, 0, 834, 45, 1, 0, 0, 0, 835, 855, 5, 33, 0, 0, 836, 
		    855, 5, 34, 0, 0, 837, 855, 5, 4, 0, 0, 838, 855, 5, 14, 0, 0, 839, 
		    855, 5, 15, 0, 0, 840, 855, 5, 16, 0, 0, 841, 855, 5, 17, 0, 0, 842, 
		    855, 5, 18, 0, 0, 843, 855, 5, 19, 0, 0, 844, 855, 5, 20, 0, 0, 845, 
		    855, 5, 21, 0, 0, 846, 855, 5, 22, 0, 0, 847, 855, 5, 23, 0, 0, 848, 
		    855, 5, 24, 0, 0, 849, 855, 5, 25, 0, 0, 850, 855, 5, 26, 0, 0, 851, 
		    855, 5, 27, 0, 0, 852, 853, 5, 10, 0, 0, 853, 855, 9, 0, 0, 0, 854, 
		    835, 1, 0, 0, 0, 854, 836, 1, 0, 0, 0, 854, 837, 1, 0, 0, 0, 854, 
		    838, 1, 0, 0, 0, 854, 839, 1, 0, 0, 0, 854, 840, 1, 0, 0, 0, 854, 
		    841, 1, 0, 0, 0, 854, 842, 1, 0, 0, 0, 854, 843, 1, 0, 0, 0, 854, 
		    844, 1, 0, 0, 0, 854, 845, 1, 0, 0, 0, 854, 846, 1, 0, 0, 0, 854, 
		    847, 1, 0, 0, 0, 854, 848, 1, 0, 0, 0, 854, 849, 1, 0, 0, 0, 854, 
		    850, 1, 0, 0, 0, 854, 851, 1, 0, 0, 0, 854, 852, 1, 0, 0, 0, 855, 
		    47, 1, 0, 0, 0, 856, 859, 3, 52, 26, 0, 857, 859, 5, 30, 0, 0, 858, 
		    856, 1, 0, 0, 0, 858, 857, 1, 0, 0, 0, 859, 49, 1, 0, 0, 0, 860, 873, 
		    3, 52, 26, 0, 861, 873, 5, 12, 0, 0, 862, 873, 5, 29, 0, 0, 863, 873, 
		    5, 31, 0, 0, 864, 873, 5, 35, 0, 0, 865, 873, 5, 36, 0, 0, 866, 873, 
		    5, 37, 0, 0, 867, 873, 5, 41, 0, 0, 868, 873, 5, 44, 0, 0, 869, 873, 
		    5, 51, 0, 0, 870, 873, 5, 52, 0, 0, 871, 873, 5, 53, 0, 0, 872, 860, 
		    1, 0, 0, 0, 872, 861, 1, 0, 0, 0, 872, 862, 1, 0, 0, 0, 872, 863, 
		    1, 0, 0, 0, 872, 864, 1, 0, 0, 0, 872, 865, 1, 0, 0, 0, 872, 866, 
		    1, 0, 0, 0, 872, 867, 1, 0, 0, 0, 872, 868, 1, 0, 0, 0, 872, 869, 
		    1, 0, 0, 0, 872, 870, 1, 0, 0, 0, 872, 871, 1, 0, 0, 0, 873, 51, 1, 
		    0, 0, 0, 874, 901, 3, 56, 28, 0, 875, 901, 3, 72, 36, 0, 876, 901, 
		    3, 62, 31, 0, 877, 901, 5, 3, 0, 0, 878, 901, 5, 5, 0, 0, 879, 901, 
		    5, 6, 0, 0, 880, 901, 5, 7, 0, 0, 881, 901, 5, 8, 0, 0, 882, 901, 
		    5, 9, 0, 0, 883, 901, 5, 11, 0, 0, 884, 901, 5, 1, 0, 0, 885, 901, 
		    5, 2, 0, 0, 886, 901, 5, 38, 0, 0, 887, 901, 5, 39, 0, 0, 888, 901, 
		    5, 40, 0, 0, 889, 901, 5, 32, 0, 0, 890, 901, 5, 54, 0, 0, 891, 901, 
		    5, 55, 0, 0, 892, 901, 5, 56, 0, 0, 893, 901, 5, 57, 0, 0, 894, 901, 
		    5, 58, 0, 0, 895, 901, 5, 59, 0, 0, 896, 901, 5, 60, 0, 0, 897, 901, 
		    5, 61, 0, 0, 898, 901, 5, 62, 0, 0, 899, 901, 5, 125, 0, 0, 900, 874, 
		    1, 0, 0, 0, 900, 875, 1, 0, 0, 0, 900, 876, 1, 0, 0, 0, 900, 877, 
		    1, 0, 0, 0, 900, 878, 1, 0, 0, 0, 900, 879, 1, 0, 0, 0, 900, 880, 
		    1, 0, 0, 0, 900, 881, 1, 0, 0, 0, 900, 882, 1, 0, 0, 0, 900, 883, 
		    1, 0, 0, 0, 900, 884, 1, 0, 0, 0, 900, 885, 1, 0, 0, 0, 900, 886, 
		    1, 0, 0, 0, 900, 887, 1, 0, 0, 0, 900, 888, 1, 0, 0, 0, 900, 889, 
		    1, 0, 0, 0, 900, 890, 1, 0, 0, 0, 900, 891, 1, 0, 0, 0, 900, 892, 
		    1, 0, 0, 0, 900, 893, 1, 0, 0, 0, 900, 894, 1, 0, 0, 0, 900, 895, 
		    1, 0, 0, 0, 900, 896, 1, 0, 0, 0, 900, 897, 1, 0, 0, 0, 900, 898, 
		    1, 0, 0, 0, 900, 899, 1, 0, 0, 0, 901, 53, 1, 0, 0, 0, 902, 903, 3, 
		    60, 30, 0, 903, 55, 1, 0, 0, 0, 904, 905, 5, 10, 0, 0, 905, 906, 7, 
		    1, 0, 0, 906, 907, 3, 58, 29, 0, 907, 908, 3, 58, 29, 0, 908, 914, 
		    1, 0, 0, 0, 909, 910, 5, 10, 0, 0, 910, 911, 3, 58, 29, 0, 911, 912, 
		    3, 58, 29, 0, 912, 914, 1, 0, 0, 0, 913, 904, 1, 0, 0, 0, 913, 909, 
		    1, 0, 0, 0, 914, 57, 1, 0, 0, 0, 915, 916, 7, 2, 0, 0, 916, 59, 1, 
		    0, 0, 0, 917, 919, 3, 62, 31, 0, 918, 917, 1, 0, 0, 0, 919, 920, 1, 
		    0, 0, 0, 920, 918, 1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 61, 1, 0, 
		    0, 0, 922, 923, 7, 3, 0, 0, 923, 63, 1, 0, 0, 0, 924, 925, 3, 66, 
		    33, 0, 925, 65, 1, 0, 0, 0, 926, 929, 3, 72, 36, 0, 927, 929, 5, 57, 
		    0, 0, 928, 926, 1, 0, 0, 0, 928, 927, 1, 0, 0, 0, 929, 935, 1, 0, 
		    0, 0, 930, 934, 3, 72, 36, 0, 931, 934, 5, 57, 0, 0, 932, 934, 3, 
		    62, 31, 0, 933, 930, 1, 0, 0, 0, 933, 931, 1, 0, 0, 0, 933, 932, 1, 
		    0, 0, 0, 934, 937, 1, 0, 0, 0, 935, 933, 1, 0, 0, 0, 935, 936, 1, 
		    0, 0, 0, 936, 67, 1, 0, 0, 0, 937, 935, 1, 0, 0, 0, 938, 940, 3, 70, 
		    35, 0, 939, 938, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0, 941, 939, 1, 0, 
		    0, 0, 941, 942, 1, 0, 0, 0, 942, 69, 1, 0, 0, 0, 943, 944, 8, 4, 0, 
		    0, 944, 71, 1, 0, 0, 0, 945, 946, 7, 5, 0, 0, 946, 73, 1, 0, 0, 0, 
		    49, 82, 88, 93, 119, 124, 133, 143, 152, 162, 171, 179, 183, 226, 
		    231, 262, 289, 351, 356, 386, 466, 476, 489, 502, 516, 530, 543, 555, 
		    569, 586, 603, 615, 619, 636, 645, 721, 784, 796, 824, 833, 854, 858, 
		    872, 900, 913, 920, 928, 933, 935, 941];
		protected static $atn;
		protected static $decisionToDFA;
		protected static $sharedContextCache;

		public function __construct(TokenStream $input)
		{
			parent::__construct($input);

			self::initialize();

			$this->interp = new ParserATNSimulator($this, self::$atn, self::$decisionToDFA, self::$sharedContextCache);
		}

		private static function initialize(): void
		{
			if (self::$atn !== null) {
				return;
			}

			RuntimeMetaData::checkVersion('4.10.1', RuntimeMetaData::VERSION);

			$atn = (new ATNDeserializer())->deserialize(self::SERIALIZED_ATN);

			$decisionToDFA = [];
			for ($i = 0, $count = $atn->getNumberOfDecisions(); $i < $count; $i++) {
				$decisionToDFA[] = new DFA($atn->getDecisionState($i), $i);
			}

			self::$atn = $atn;
			self::$decisionToDFA = $decisionToDFA;
			self::$sharedContextCache = new PredictionContextCache();
		}

		public function getGrammarFileName(): string
		{
			return "PCRE.g4";
		}

		public function getRuleNames(): array
		{
			return self::RULE_NAMES;
		}

		public function getSerializedATN(): array
		{
			return self::SERIALIZED_ATN;
		}

		public function getATN(): ATN
		{
			return self::$atn;
		}

		public function getVocabulary(): Vocabulary
        {
            static $vocabulary;

			return $vocabulary = $vocabulary ?? new VocabularyImpl(self::LITERAL_NAMES, self::SYMBOLIC_NAMES);
        }

		/**
		 * @throws RecognitionException
		 */
		public function parse(): Context\ParseContext
		{
		    $localContext = new Context\ParseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 0, self::RULE_parse);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(74);
		        $this->alternation();
		        $this->setState(75);
		        $this->match(self::EOF);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alternation(): Context\AlternationContext
		{
		    $localContext = new Context\AlternationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 2, self::RULE_alternation);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(77);
		        $this->expr();
		        $this->setState(82);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 0, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(78);
		        		$this->match(self::Pipe);
		        		$this->setState(79);
		        		$this->expr(); 
		        	}

		        	$this->setState(84);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 0, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expr(): Context\ExprContext
		{
		    $localContext = new Context\ExprContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 4, self::RULE_expr);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(88);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::OneDataUnit) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::ExtendedUnicodeChar) | (1 << self::CharacterClassStart) | (1 << self::CharacterClassEnd) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::NonWordBoundary) | (1 << self::StartOfSubject) | (1 << self::EndOfSubjectOrLine) | (1 << self::EndOfSubjectOrLineEndOfSubject) | (1 << self::EndOfSubject) | (1 << self::PreviousMatchInSubject) | (1 << self::ResetStartMatch) | (1 << self::SubroutineOrNamedReferenceStartG) | (1 << self::NamedReferenceStartK) | (1 << self::OpenParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0)) {
		        	$this->setState(85);
		        	$this->element();
		        	$this->setState(90);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function element(): Context\ElementContext
		{
		    $localContext = new Context\ElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 6, self::RULE_element);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(91);
		        $this->atom();
		        $this->setState(93);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 2, $this->ctx)) {
		            case 1:
		        	    $this->setState(92);
		        	    $this->quantifier();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function quantifier(): Context\QuantifierContext
		{
		    $localContext = new Context\QuantifierContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 8, self::RULE_quantifier);

		    try {
		        $this->setState(119);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 3, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(95);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(96);
		        	    $this->quantifier_type();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(97);
		        	    $this->match(self::Plus);
		        	    $this->setState(98);
		        	    $this->quantifier_type();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(99);
		        	    $this->match(self::Star);
		        	    $this->setState(100);
		        	    $this->quantifier_type();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(101);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(102);
		        	    $this->number();
		        	    $this->setState(103);
		        	    $this->match(self::CloseBrace);
		        	    $this->setState(104);
		        	    $this->quantifier_type();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(106);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(107);
		        	    $this->number();
		        	    $this->setState(108);
		        	    $this->match(self::Comma);
		        	    $this->setState(109);
		        	    $this->match(self::CloseBrace);
		        	    $this->setState(110);
		        	    $this->quantifier_type();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(112);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(113);
		        	    $this->number();
		        	    $this->setState(114);
		        	    $this->match(self::Comma);
		        	    $this->setState(115);
		        	    $this->number();
		        	    $this->setState(116);
		        	    $this->match(self::CloseBrace);
		        	    $this->setState(117);
		        	    $this->quantifier_type();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function quantifier_type(): Context\Quantifier_typeContext
		{
		    $localContext = new Context\Quantifier_typeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 10, self::RULE_quantifier_type);

		    try {
		        $this->setState(124);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::Plus:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(121);
		            	$this->match(self::Plus);
		            	break;

		            case self::QuestionMark:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(122);
		            	$this->match(self::QuestionMark);
		            	break;

		            case self::EOF:
		            case self::Quoted:
		            case self::BlockQuoted:
		            case self::BellChar:
		            case self::ControlChar:
		            case self::EscapeChar:
		            case self::FormFeed:
		            case self::NewLine:
		            case self::CarriageReturn:
		            case self::Tab:
		            case self::Backslash:
		            case self::HexChar:
		            case self::Dot:
		            case self::OneDataUnit:
		            case self::DecimalDigit:
		            case self::NotDecimalDigit:
		            case self::HorizontalWhiteSpace:
		            case self::NotHorizontalWhiteSpace:
		            case self::NotNewLine:
		            case self::CharWithProperty:
		            case self::CharWithoutProperty:
		            case self::NewLineSequence:
		            case self::WhiteSpace:
		            case self::NotWhiteSpace:
		            case self::VerticalWhiteSpace:
		            case self::NotVerticalWhiteSpace:
		            case self::WordChar:
		            case self::NotWordChar:
		            case self::ExtendedUnicodeChar:
		            case self::CharacterClassStart:
		            case self::CharacterClassEnd:
		            case self::Caret:
		            case self::Hyphen:
		            case self::POSIXNamedSet:
		            case self::POSIXNegatedNamedSet:
		            case self::OpenBrace:
		            case self::CloseBrace:
		            case self::Comma:
		            case self::WordBoundary:
		            case self::NonWordBoundary:
		            case self::StartOfSubject:
		            case self::EndOfSubjectOrLine:
		            case self::EndOfSubjectOrLineEndOfSubject:
		            case self::EndOfSubject:
		            case self::PreviousMatchInSubject:
		            case self::ResetStartMatch:
		            case self::SubroutineOrNamedReferenceStartG:
		            case self::NamedReferenceStartK:
		            case self::Pipe:
		            case self::OpenParen:
		            case self::CloseParen:
		            case self::LessThan:
		            case self::GreaterThan:
		            case self::SingleQuote:
		            case self::Underscore:
		            case self::Colon:
		            case self::Hash:
		            case self::Equals:
		            case self::Exclamation:
		            case self::Ampersand:
		            case self::ALC:
		            case self::BLC:
		            case self::CLC:
		            case self::DLC:
		            case self::ELC:
		            case self::FLC:
		            case self::GLC:
		            case self::HLC:
		            case self::ILC:
		            case self::JLC:
		            case self::KLC:
		            case self::LLC:
		            case self::MLC:
		            case self::NLC:
		            case self::OLC:
		            case self::PLC:
		            case self::QLC:
		            case self::RLC:
		            case self::SLC:
		            case self::TLC:
		            case self::ULC:
		            case self::VLC:
		            case self::WLC:
		            case self::XLC:
		            case self::YLC:
		            case self::ZLC:
		            case self::AUC:
		            case self::BUC:
		            case self::CUC:
		            case self::DUC:
		            case self::EUC:
		            case self::FUC:
		            case self::GUC:
		            case self::HUC:
		            case self::IUC:
		            case self::JUC:
		            case self::KUC:
		            case self::LUC:
		            case self::MUC:
		            case self::NUC:
		            case self::OUC:
		            case self::PUC:
		            case self::QUC:
		            case self::RUC:
		            case self::SUC:
		            case self::TUC:
		            case self::UUC:
		            case self::VUC:
		            case self::WUC:
		            case self::XUC:
		            case self::YUC:
		            case self::ZUC:
		            case self::D1:
		            case self::D2:
		            case self::D3:
		            case self::D4:
		            case self::D5:
		            case self::D6:
		            case self::D7:
		            case self::D8:
		            case self::D9:
		            case self::D0:
		            case self::OtherChar:
		            	$this->enterOuterAlt($localContext, 3);

		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function character_class(): Context\Character_classContext
		{
		    $localContext = new Context\Character_classContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 12, self::RULE_character_class);

		    try {
		        $this->setState(183);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 11, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(126);
		        	    $this->match(self::CharacterClassStart);
		        	    $this->setState(127);
		        	    $this->match(self::Caret);
		        	    $this->setState(128);
		        	    $this->match(self::CharacterClassEnd);
		        	    $this->setState(129);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(131); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(130);
		        	    	$this->cc_atom();
		        	    	$this->setState(133); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::CharacterClassStart) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::EndOfSubjectOrLine) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::CloseParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0));
		        	    $this->setState(135);
		        	    $this->match(self::CharacterClassEnd);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(137);
		        	    $this->match(self::CharacterClassStart);
		        	    $this->setState(138);
		        	    $this->match(self::Caret);
		        	    $this->setState(139);
		        	    $this->match(self::CharacterClassEnd);
		        	    $this->setState(143);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::CharacterClassStart) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::EndOfSubjectOrLine) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::CloseParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0)) {
		        	    	$this->setState(140);
		        	    	$this->cc_atom();
		        	    	$this->setState(145);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(146);
		        	    $this->match(self::CharacterClassEnd);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(147);
		        	    $this->match(self::CharacterClassStart);
		        	    $this->setState(148);
		        	    $this->match(self::Caret);
		        	    $this->setState(150); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(149);
		        	    	$this->cc_atom();
		        	    	$this->setState(152); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::CharacterClassStart) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::EndOfSubjectOrLine) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::CloseParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0));
		        	    $this->setState(154);
		        	    $this->match(self::CharacterClassEnd);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(156);
		        	    $this->match(self::CharacterClassStart);
		        	    $this->setState(157);
		        	    $this->match(self::CharacterClassEnd);
		        	    $this->setState(158);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(160); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(159);
		        	    	$this->cc_atom();
		        	    	$this->setState(162); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::CharacterClassStart) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::EndOfSubjectOrLine) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::CloseParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0));
		        	    $this->setState(164);
		        	    $this->match(self::CharacterClassEnd);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(166);
		        	    $this->match(self::CharacterClassStart);
		        	    $this->setState(167);
		        	    $this->match(self::CharacterClassEnd);
		        	    $this->setState(171);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::CharacterClassStart) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::EndOfSubjectOrLine) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::CloseParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0)) {
		        	    	$this->setState(168);
		        	    	$this->cc_atom();
		        	    	$this->setState(173);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(174);
		        	    $this->match(self::CharacterClassEnd);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(175);
		        	    $this->match(self::CharacterClassStart);
		        	    $this->setState(177); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(176);
		        	    	$this->cc_atom();
		        	    	$this->setState(179); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::CharacterClassStart) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::EndOfSubjectOrLine) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::CloseParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0));
		        	    $this->setState(181);
		        	    $this->match(self::CharacterClassEnd);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function backreference(): Context\BackreferenceContext
		{
		    $localContext = new Context\BackreferenceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 14, self::RULE_backreference);

		    try {
		        $this->setState(226);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 12, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(185);
		        	    $this->backreference_or_octal();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(186);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(187);
		        	    $this->number();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(188);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(189);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(190);
		        	    $this->number();
		        	    $this->setState(191);
		        	    $this->match(self::CloseBrace);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(193);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(194);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(195);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(196);
		        	    $this->number();
		        	    $this->setState(197);
		        	    $this->match(self::CloseBrace);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(199);
		        	    $this->match(self::NamedReferenceStartK);
		        	    $this->setState(200);
		        	    $this->match(self::LessThan);
		        	    $this->setState(201);
		        	    $this->name();
		        	    $this->setState(202);
		        	    $this->match(self::GreaterThan);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(204);
		        	    $this->match(self::NamedReferenceStartK);
		        	    $this->setState(205);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(206);
		        	    $this->name();
		        	    $this->setState(207);
		        	    $this->match(self::SingleQuote);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(209);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(210);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(211);
		        	    $this->name();
		        	    $this->setState(212);
		        	    $this->match(self::CloseBrace);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(214);
		        	    $this->match(self::NamedReferenceStartK);
		        	    $this->setState(215);
		        	    $this->match(self::OpenBrace);
		        	    $this->setState(216);
		        	    $this->name();
		        	    $this->setState(217);
		        	    $this->match(self::CloseBrace);
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(219);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(220);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(221);
		        	    $this->match(self::PUC);
		        	    $this->setState(222);
		        	    $this->match(self::Equals);
		        	    $this->setState(223);
		        	    $this->name();
		        	    $this->setState(224);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function backreference_or_octal(): Context\Backreference_or_octalContext
		{
		    $localContext = new Context\Backreference_or_octalContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 16, self::RULE_backreference_or_octal);

		    try {
		        $this->setState(231);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 13, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(228);
		        	    $this->octal_char();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(229);
		        	    $this->match(self::Backslash);
		        	    $this->setState(230);
		        	    $this->digit();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function capture(): Context\CaptureContext
		{
		    $localContext = new Context\CaptureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 18, self::RULE_capture);

		    try {
		        $this->setState(262);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 14, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(233);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(234);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(235);
		        	    $this->match(self::LessThan);
		        	    $this->setState(236);
		        	    $this->name();
		        	    $this->setState(237);
		        	    $this->match(self::GreaterThan);
		        	    $this->setState(238);
		        	    $this->alternation();
		        	    $this->setState(239);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(241);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(242);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(243);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(244);
		        	    $this->name();
		        	    $this->setState(245);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(246);
		        	    $this->alternation();
		        	    $this->setState(247);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(249);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(250);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(251);
		        	    $this->match(self::PUC);
		        	    $this->setState(252);
		        	    $this->match(self::LessThan);
		        	    $this->setState(253);
		        	    $this->name();
		        	    $this->setState(254);
		        	    $this->match(self::GreaterThan);
		        	    $this->setState(255);
		        	    $this->alternation();
		        	    $this->setState(256);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(258);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(259);
		        	    $this->alternation();
		        	    $this->setState(260);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function non_capture(): Context\Non_captureContext
		{
		    $localContext = new Context\Non_captureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 20, self::RULE_non_capture);

		    try {
		        $this->setState(289);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 15, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(264);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(265);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(266);
		        	    $this->match(self::Colon);
		        	    $this->setState(267);
		        	    $this->alternation();
		        	    $this->setState(268);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(270);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(271);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(272);
		        	    $this->match(self::Pipe);
		        	    $this->setState(273);
		        	    $this->alternation();
		        	    $this->setState(274);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(276);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(277);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(278);
		        	    $this->match(self::GreaterThan);
		        	    $this->setState(279);
		        	    $this->alternation();
		        	    $this->setState(280);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(282);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(283);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(284);
		        	    $this->option_flags();
		        	    $this->setState(285);
		        	    $this->match(self::Colon);
		        	    $this->setState(286);
		        	    $this->alternation();
		        	    $this->setState(287);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function comment(): Context\CommentContext
		{
		    $localContext = new Context\CommentContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 22, self::RULE_comment);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(291);
		        $this->match(self::OpenParen);
		        $this->setState(292);
		        $this->match(self::QuestionMark);
		        $this->setState(293);
		        $this->match(self::Hash);
		        $this->setState(294);
		        $this->non_close_parens();
		        $this->setState(295);
		        $this->match(self::CloseParen);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function option(): Context\OptionContext
		{
		    $localContext = new Context\OptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 24, self::RULE_option);

		    try {
		        $this->setState(351);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 16, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(297);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(298);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(299);
		        	    $this->option_flags();
		        	    $this->setState(300);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(301);
		        	    $this->option_flags();
		        	    $this->setState(302);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(304);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(305);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(306);
		        	    $this->option_flags();
		        	    $this->setState(307);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(309);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(310);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(311);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(312);
		        	    $this->option_flags();
		        	    $this->setState(313);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(315);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(316);
		        	    $this->match(self::Star);
		        	    $this->setState(317);
		        	    $this->match(self::NUC);
		        	    $this->setState(318);
		        	    $this->match(self::OUC);
		        	    $this->setState(319);
		        	    $this->match(self::Underscore);
		        	    $this->setState(320);
		        	    $this->match(self::SUC);
		        	    $this->setState(321);
		        	    $this->match(self::TUC);
		        	    $this->setState(322);
		        	    $this->match(self::AUC);
		        	    $this->setState(323);
		        	    $this->match(self::RUC);
		        	    $this->setState(324);
		        	    $this->match(self::TUC);
		        	    $this->setState(325);
		        	    $this->match(self::Underscore);
		        	    $this->setState(326);
		        	    $this->match(self::OUC);
		        	    $this->setState(327);
		        	    $this->match(self::PUC);
		        	    $this->setState(328);
		        	    $this->match(self::TUC);
		        	    $this->setState(329);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(330);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(331);
		        	    $this->match(self::Star);
		        	    $this->setState(332);
		        	    $this->match(self::UUC);
		        	    $this->setState(333);
		        	    $this->match(self::TUC);
		        	    $this->setState(334);
		        	    $this->match(self::FUC);
		        	    $this->setState(335);
		        	    $this->match(self::D8);
		        	    $this->setState(336);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(337);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(338);
		        	    $this->match(self::Star);
		        	    $this->setState(339);
		        	    $this->match(self::UUC);
		        	    $this->setState(340);
		        	    $this->match(self::TUC);
		        	    $this->setState(341);
		        	    $this->match(self::FUC);
		        	    $this->setState(342);
		        	    $this->match(self::D1);
		        	    $this->setState(343);
		        	    $this->match(self::D6);
		        	    $this->setState(344);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(345);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(346);
		        	    $this->match(self::Star);
		        	    $this->setState(347);
		        	    $this->match(self::UUC);
		        	    $this->setState(348);
		        	    $this->match(self::CUC);
		        	    $this->setState(349);
		        	    $this->match(self::PUC);
		        	    $this->setState(350);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function option_flags(): Context\Option_flagsContext
		{
		    $localContext = new Context\Option_flagsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 26, self::RULE_option_flags);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(354); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(353);
		        	$this->option_flag();
		        	$this->setState(356); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ((((($_la - 71)) & ~0x3f) === 0 && ((1 << ($_la - 71)) & ((1 << (self::ILC - 71)) | (1 << (self::MLC - 71)) | (1 << (self::SLC - 71)) | (1 << (self::XLC - 71)) | (1 << (self::JUC - 71)) | (1 << (self::UUC - 71)))) !== 0));
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function option_flag(): Context\Option_flagContext
		{
		    $localContext = new Context\Option_flagContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 28, self::RULE_option_flag);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(358);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 71)) & ~0x3f) === 0 && ((1 << ($_la - 71)) & ((1 << (self::ILC - 71)) | (1 << (self::MLC - 71)) | (1 << (self::SLC - 71)) | (1 << (self::XLC - 71)) | (1 << (self::JUC - 71)) | (1 << (self::UUC - 71)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function look_around(): Context\Look_aroundContext
		{
		    $localContext = new Context\Look_aroundContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 30, self::RULE_look_around);

		    try {
		        $this->setState(386);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 18, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(360);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(361);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(362);
		        	    $this->match(self::Equals);
		        	    $this->setState(363);
		        	    $this->alternation();
		        	    $this->setState(364);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(366);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(367);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(368);
		        	    $this->match(self::Exclamation);
		        	    $this->setState(369);
		        	    $this->alternation();
		        	    $this->setState(370);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(372);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(373);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(374);
		        	    $this->match(self::LessThan);
		        	    $this->setState(375);
		        	    $this->match(self::Equals);
		        	    $this->setState(376);
		        	    $this->alternation();
		        	    $this->setState(377);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(379);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(380);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(381);
		        	    $this->match(self::LessThan);
		        	    $this->setState(382);
		        	    $this->match(self::Exclamation);
		        	    $this->setState(383);
		        	    $this->alternation();
		        	    $this->setState(384);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function subroutine_reference(): Context\Subroutine_referenceContext
		{
		    $localContext = new Context\Subroutine_referenceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 32, self::RULE_subroutine_reference);

		    try {
		        $this->setState(466);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 19, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(388);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(389);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(390);
		        	    $this->match(self::RUC);
		        	    $this->setState(391);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(392);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(393);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(394);
		        	    $this->number();
		        	    $this->setState(395);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(397);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(398);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(399);
		        	    $this->match(self::Plus);
		        	    $this->setState(400);
		        	    $this->number();
		        	    $this->setState(401);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(403);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(404);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(405);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(406);
		        	    $this->number();
		        	    $this->setState(407);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(409);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(410);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(411);
		        	    $this->match(self::Ampersand);
		        	    $this->setState(412);
		        	    $this->name();
		        	    $this->setState(413);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(415);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(416);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(417);
		        	    $this->match(self::PUC);
		        	    $this->setState(418);
		        	    $this->match(self::GreaterThan);
		        	    $this->setState(419);
		        	    $this->name();
		        	    $this->setState(420);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(422);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(423);
		        	    $this->match(self::LessThan);
		        	    $this->setState(424);
		        	    $this->name();
		        	    $this->setState(425);
		        	    $this->match(self::GreaterThan);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(427);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(428);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(429);
		        	    $this->name();
		        	    $this->setState(430);
		        	    $this->match(self::SingleQuote);
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(432);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(433);
		        	    $this->match(self::LessThan);
		        	    $this->setState(434);
		        	    $this->number();
		        	    $this->setState(435);
		        	    $this->match(self::GreaterThan);
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(437);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(438);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(439);
		        	    $this->number();
		        	    $this->setState(440);
		        	    $this->match(self::SingleQuote);
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(442);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(443);
		        	    $this->match(self::LessThan);
		        	    $this->setState(444);
		        	    $this->match(self::Plus);
		        	    $this->setState(445);
		        	    $this->number();
		        	    $this->setState(446);
		        	    $this->match(self::GreaterThan);
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(448);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(449);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(450);
		        	    $this->match(self::Plus);
		        	    $this->setState(451);
		        	    $this->number();
		        	    $this->setState(452);
		        	    $this->match(self::SingleQuote);
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(454);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(455);
		        	    $this->match(self::LessThan);
		        	    $this->setState(456);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(457);
		        	    $this->number();
		        	    $this->setState(458);
		        	    $this->match(self::GreaterThan);
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(460);
		        	    $this->match(self::SubroutineOrNamedReferenceStartG);
		        	    $this->setState(461);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(462);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(463);
		        	    $this->number();
		        	    $this->setState(464);
		        	    $this->match(self::SingleQuote);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function conditional(): Context\ConditionalContext
		{
		    $localContext = new Context\ConditionalContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 34, self::RULE_conditional);

		    try {
		        $this->setState(619);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 31, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(468);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(469);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(470);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(471);
		        	    $this->number();
		        	    $this->setState(472);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(473);
		        	    $this->alternation();
		        	    $this->setState(476);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(474);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(475);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(478);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(480);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(481);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(482);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(483);
		        	    $this->match(self::Plus);
		        	    $this->setState(484);
		        	    $this->number();
		        	    $this->setState(485);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(486);
		        	    $this->alternation();
		        	    $this->setState(489);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(487);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(488);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(491);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(493);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(494);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(495);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(496);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(497);
		        	    $this->number();
		        	    $this->setState(498);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(499);
		        	    $this->alternation();
		        	    $this->setState(502);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(500);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(501);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(504);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(506);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(507);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(508);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(509);
		        	    $this->match(self::LessThan);
		        	    $this->setState(510);
		        	    $this->name();
		        	    $this->setState(511);
		        	    $this->match(self::GreaterThan);
		        	    $this->setState(512);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(513);
		        	    $this->alternation();
		        	    $this->setState(516);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(514);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(515);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(518);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(520);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(521);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(522);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(523);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(524);
		        	    $this->name();
		        	    $this->setState(525);
		        	    $this->match(self::SingleQuote);
		        	    $this->setState(526);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(527);
		        	    $this->alternation();
		        	    $this->setState(530);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(528);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(529);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(532);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(534);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(535);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(536);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(537);
		        	    $this->match(self::RUC);
		        	    $this->setState(538);
		        	    $this->number();
		        	    $this->setState(539);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(540);
		        	    $this->alternation();
		        	    $this->setState(543);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(541);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(542);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(545);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(547);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(548);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(549);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(550);
		        	    $this->match(self::RUC);
		        	    $this->setState(551);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(552);
		        	    $this->alternation();
		        	    $this->setState(555);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(553);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(554);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(557);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(559);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(560);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(561);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(562);
		        	    $this->match(self::RUC);
		        	    $this->setState(563);
		        	    $this->match(self::Ampersand);
		        	    $this->setState(564);
		        	    $this->name();
		        	    $this->setState(565);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(566);
		        	    $this->alternation();
		        	    $this->setState(569);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(567);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(568);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(571);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(573);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(574);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(575);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(576);
		        	    $this->match(self::DUC);
		        	    $this->setState(577);
		        	    $this->match(self::EUC);
		        	    $this->setState(578);
		        	    $this->match(self::FUC);
		        	    $this->setState(579);
		        	    $this->match(self::IUC);
		        	    $this->setState(580);
		        	    $this->match(self::NUC);
		        	    $this->setState(581);
		        	    $this->match(self::EUC);
		        	    $this->setState(582);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(583);
		        	    $this->alternation();
		        	    $this->setState(586);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(584);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(585);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(588);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(590);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(591);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(592);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(593);
		        	    $this->match(self::ALC);
		        	    $this->setState(594);
		        	    $this->match(self::SLC);
		        	    $this->setState(595);
		        	    $this->match(self::SLC);
		        	    $this->setState(596);
		        	    $this->match(self::ELC);
		        	    $this->setState(597);
		        	    $this->match(self::RLC);
		        	    $this->setState(598);
		        	    $this->match(self::TLC);
		        	    $this->setState(599);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(600);
		        	    $this->alternation();
		        	    $this->setState(603);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(601);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(602);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(605);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(607);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(608);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(609);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(610);
		        	    $this->name();
		        	    $this->setState(611);
		        	    $this->match(self::CloseParen);
		        	    $this->setState(612);
		        	    $this->alternation();
		        	    $this->setState(615);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::Pipe) {
		        	    	$this->setState(613);
		        	    	$this->match(self::Pipe);
		        	    	$this->setState(614);
		        	    	$this->alternation();
		        	    }
		        	    $this->setState(617);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function backtrack_control(): Context\Backtrack_controlContext
		{
		    $localContext = new Context\Backtrack_controlContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 36, self::RULE_backtrack_control);

		    try {
		        $this->setState(721);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 34, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(621);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(622);
		        	    $this->match(self::Star);
		        	    $this->setState(623);
		        	    $this->match(self::AUC);
		        	    $this->setState(624);
		        	    $this->match(self::CUC);
		        	    $this->setState(625);
		        	    $this->match(self::CUC);
		        	    $this->setState(626);
		        	    $this->match(self::EUC);
		        	    $this->setState(627);
		        	    $this->match(self::PUC);
		        	    $this->setState(628);
		        	    $this->match(self::TUC);
		        	    $this->setState(629);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(630);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(631);
		        	    $this->match(self::Star);
		        	    $this->setState(632);
		        	    $this->match(self::FUC);
		        	    $this->setState(636);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AUC) {
		        	    	$this->setState(633);
		        	    	$this->match(self::AUC);
		        	    	$this->setState(634);
		        	    	$this->match(self::IUC);
		        	    	$this->setState(635);
		        	    	$this->match(self::LUC);
		        	    }
		        	    $this->setState(638);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(639);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(640);
		        	    $this->match(self::Star);
		        	    $this->setState(645);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::MUC) {
		        	    	$this->setState(641);
		        	    	$this->match(self::MUC);
		        	    	$this->setState(642);
		        	    	$this->match(self::AUC);
		        	    	$this->setState(643);
		        	    	$this->match(self::RUC);
		        	    	$this->setState(644);
		        	    	$this->match(self::KUC);
		        	    }
		        	    $this->setState(647);
		        	    $this->match(self::Colon);
		        	    $this->setState(648);
		        	    $this->match(self::NUC);
		        	    $this->setState(649);
		        	    $this->match(self::AUC);
		        	    $this->setState(650);
		        	    $this->match(self::MUC);
		        	    $this->setState(651);
		        	    $this->match(self::EUC);
		        	    $this->setState(652);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(653);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(654);
		        	    $this->match(self::Star);
		        	    $this->setState(655);
		        	    $this->match(self::CUC);
		        	    $this->setState(656);
		        	    $this->match(self::OUC);
		        	    $this->setState(657);
		        	    $this->match(self::MUC);
		        	    $this->setState(658);
		        	    $this->match(self::MUC);
		        	    $this->setState(659);
		        	    $this->match(self::IUC);
		        	    $this->setState(660);
		        	    $this->match(self::TUC);
		        	    $this->setState(661);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(662);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(663);
		        	    $this->match(self::Star);
		        	    $this->setState(664);
		        	    $this->match(self::PUC);
		        	    $this->setState(665);
		        	    $this->match(self::RUC);
		        	    $this->setState(666);
		        	    $this->match(self::UUC);
		        	    $this->setState(667);
		        	    $this->match(self::NUC);
		        	    $this->setState(668);
		        	    $this->match(self::EUC);
		        	    $this->setState(669);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(670);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(671);
		        	    $this->match(self::Star);
		        	    $this->setState(672);
		        	    $this->match(self::PUC);
		        	    $this->setState(673);
		        	    $this->match(self::RUC);
		        	    $this->setState(674);
		        	    $this->match(self::UUC);
		        	    $this->setState(675);
		        	    $this->match(self::NUC);
		        	    $this->setState(676);
		        	    $this->match(self::EUC);
		        	    $this->setState(677);
		        	    $this->match(self::Colon);
		        	    $this->setState(678);
		        	    $this->match(self::NUC);
		        	    $this->setState(679);
		        	    $this->match(self::AUC);
		        	    $this->setState(680);
		        	    $this->match(self::MUC);
		        	    $this->setState(681);
		        	    $this->match(self::EUC);
		        	    $this->setState(682);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(683);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(684);
		        	    $this->match(self::Star);
		        	    $this->setState(685);
		        	    $this->match(self::SUC);
		        	    $this->setState(686);
		        	    $this->match(self::KUC);
		        	    $this->setState(687);
		        	    $this->match(self::IUC);
		        	    $this->setState(688);
		        	    $this->match(self::PUC);
		        	    $this->setState(689);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(690);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(691);
		        	    $this->match(self::Star);
		        	    $this->setState(692);
		        	    $this->match(self::SUC);
		        	    $this->setState(693);
		        	    $this->match(self::KUC);
		        	    $this->setState(694);
		        	    $this->match(self::IUC);
		        	    $this->setState(695);
		        	    $this->match(self::PUC);
		        	    $this->setState(696);
		        	    $this->match(self::Colon);
		        	    $this->setState(697);
		        	    $this->match(self::NUC);
		        	    $this->setState(698);
		        	    $this->match(self::AUC);
		        	    $this->setState(699);
		        	    $this->match(self::MUC);
		        	    $this->setState(700);
		        	    $this->match(self::EUC);
		        	    $this->setState(701);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(702);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(703);
		        	    $this->match(self::Star);
		        	    $this->setState(704);
		        	    $this->match(self::TUC);
		        	    $this->setState(705);
		        	    $this->match(self::HUC);
		        	    $this->setState(706);
		        	    $this->match(self::EUC);
		        	    $this->setState(707);
		        	    $this->match(self::NUC);
		        	    $this->setState(708);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(709);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(710);
		        	    $this->match(self::Star);
		        	    $this->setState(711);
		        	    $this->match(self::TUC);
		        	    $this->setState(712);
		        	    $this->match(self::HUC);
		        	    $this->setState(713);
		        	    $this->match(self::EUC);
		        	    $this->setState(714);
		        	    $this->match(self::NUC);
		        	    $this->setState(715);
		        	    $this->match(self::Colon);
		        	    $this->setState(716);
		        	    $this->match(self::NUC);
		        	    $this->setState(717);
		        	    $this->match(self::AUC);
		        	    $this->setState(718);
		        	    $this->match(self::MUC);
		        	    $this->setState(719);
		        	    $this->match(self::EUC);
		        	    $this->setState(720);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function newline_convention(): Context\Newline_conventionContext
		{
		    $localContext = new Context\Newline_conventionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 38, self::RULE_newline_convention);

		    try {
		        $this->setState(784);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 35, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(723);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(724);
		        	    $this->match(self::Star);
		        	    $this->setState(725);
		        	    $this->match(self::CUC);
		        	    $this->setState(726);
		        	    $this->match(self::RUC);
		        	    $this->setState(727);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(728);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(729);
		        	    $this->match(self::Star);
		        	    $this->setState(730);
		        	    $this->match(self::LUC);
		        	    $this->setState(731);
		        	    $this->match(self::FUC);
		        	    $this->setState(732);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(733);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(734);
		        	    $this->match(self::Star);
		        	    $this->setState(735);
		        	    $this->match(self::CUC);
		        	    $this->setState(736);
		        	    $this->match(self::RUC);
		        	    $this->setState(737);
		        	    $this->match(self::LUC);
		        	    $this->setState(738);
		        	    $this->match(self::FUC);
		        	    $this->setState(739);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(740);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(741);
		        	    $this->match(self::Star);
		        	    $this->setState(742);
		        	    $this->match(self::AUC);
		        	    $this->setState(743);
		        	    $this->match(self::NUC);
		        	    $this->setState(744);
		        	    $this->match(self::YUC);
		        	    $this->setState(745);
		        	    $this->match(self::CUC);
		        	    $this->setState(746);
		        	    $this->match(self::RUC);
		        	    $this->setState(747);
		        	    $this->match(self::LUC);
		        	    $this->setState(748);
		        	    $this->match(self::FUC);
		        	    $this->setState(749);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(750);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(751);
		        	    $this->match(self::Star);
		        	    $this->setState(752);
		        	    $this->match(self::AUC);
		        	    $this->setState(753);
		        	    $this->match(self::NUC);
		        	    $this->setState(754);
		        	    $this->match(self::YUC);
		        	    $this->setState(755);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(756);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(757);
		        	    $this->match(self::Star);
		        	    $this->setState(758);
		        	    $this->match(self::BUC);
		        	    $this->setState(759);
		        	    $this->match(self::SUC);
		        	    $this->setState(760);
		        	    $this->match(self::RUC);
		        	    $this->setState(761);
		        	    $this->match(self::Underscore);
		        	    $this->setState(762);
		        	    $this->match(self::AUC);
		        	    $this->setState(763);
		        	    $this->match(self::NUC);
		        	    $this->setState(764);
		        	    $this->match(self::YUC);
		        	    $this->setState(765);
		        	    $this->match(self::CUC);
		        	    $this->setState(766);
		        	    $this->match(self::RUC);
		        	    $this->setState(767);
		        	    $this->match(self::LUC);
		        	    $this->setState(768);
		        	    $this->match(self::FUC);
		        	    $this->setState(769);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(770);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(771);
		        	    $this->match(self::Star);
		        	    $this->setState(772);
		        	    $this->match(self::BUC);
		        	    $this->setState(773);
		        	    $this->match(self::SUC);
		        	    $this->setState(774);
		        	    $this->match(self::RUC);
		        	    $this->setState(775);
		        	    $this->match(self::Underscore);
		        	    $this->setState(776);
		        	    $this->match(self::UUC);
		        	    $this->setState(777);
		        	    $this->match(self::NUC);
		        	    $this->setState(778);
		        	    $this->match(self::IUC);
		        	    $this->setState(779);
		        	    $this->match(self::CUC);
		        	    $this->setState(780);
		        	    $this->match(self::OUC);
		        	    $this->setState(781);
		        	    $this->match(self::DUC);
		        	    $this->setState(782);
		        	    $this->match(self::EUC);
		        	    $this->setState(783);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function callout(): Context\CalloutContext
		{
		    $localContext = new Context\CalloutContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 40, self::RULE_callout);

		    try {
		        $this->setState(796);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 36, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(786);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(787);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(788);
		        	    $this->match(self::CUC);
		        	    $this->setState(789);
		        	    $this->match(self::CloseParen);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(790);
		        	    $this->match(self::OpenParen);
		        	    $this->setState(791);
		        	    $this->match(self::QuestionMark);
		        	    $this->setState(792);
		        	    $this->match(self::CUC);
		        	    $this->setState(793);
		        	    $this->number();
		        	    $this->setState(794);
		        	    $this->match(self::CloseParen);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function atom(): Context\AtomContext
		{
		    $localContext = new Context\AtomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 42, self::RULE_atom);

		    try {
		        $this->setState(824);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 37, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(798);
		        	    $this->subroutine_reference();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(799);
		        	    $this->shared_atom();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(800);
		        	    $this->literal();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(801);
		        	    $this->character_class();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(802);
		        	    $this->capture();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(803);
		        	    $this->non_capture();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(804);
		        	    $this->comment();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(805);
		        	    $this->option();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(806);
		        	    $this->look_around();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(807);
		        	    $this->backreference();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(808);
		        	    $this->conditional();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(809);
		        	    $this->backtrack_control();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(810);
		        	    $this->newline_convention();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(811);
		        	    $this->callout();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(812);
		        	    $this->match(self::Dot);
		        	break;

		        	case 16:
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(813);
		        	    $this->match(self::Caret);
		        	break;

		        	case 17:
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(814);
		        	    $this->match(self::StartOfSubject);
		        	break;

		        	case 18:
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(815);
		        	    $this->match(self::WordBoundary);
		        	break;

		        	case 19:
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(816);
		        	    $this->match(self::NonWordBoundary);
		        	break;

		        	case 20:
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(817);
		        	    $this->match(self::EndOfSubjectOrLine);
		        	break;

		        	case 21:
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(818);
		        	    $this->match(self::EndOfSubjectOrLineEndOfSubject);
		        	break;

		        	case 22:
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(819);
		        	    $this->match(self::EndOfSubject);
		        	break;

		        	case 23:
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(820);
		        	    $this->match(self::PreviousMatchInSubject);
		        	break;

		        	case 24:
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(821);
		        	    $this->match(self::ResetStartMatch);
		        	break;

		        	case 25:
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(822);
		        	    $this->match(self::OneDataUnit);
		        	break;

		        	case 26:
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(823);
		        	    $this->match(self::ExtendedUnicodeChar);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cc_atom(): Context\Cc_atomContext
		{
		    $localContext = new Context\Cc_atomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 44, self::RULE_cc_atom);

		    try {
		        $this->setState(833);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 38, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(826);
		        	    $this->cc_literal();
		        	    $this->setState(827);
		        	    $this->match(self::Hyphen);
		        	    $this->setState(828);
		        	    $this->cc_literal();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(830);
		        	    $this->shared_atom();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(831);
		        	    $this->cc_literal();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(832);
		        	    $this->backreference_or_octal();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function shared_atom(): Context\Shared_atomContext
		{
		    $localContext = new Context\Shared_atomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 46, self::RULE_shared_atom);

		    try {
		        $this->setState(854);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::POSIXNamedSet:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(835);
		            	$this->match(self::POSIXNamedSet);
		            	break;

		            case self::POSIXNegatedNamedSet:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(836);
		            	$this->match(self::POSIXNegatedNamedSet);
		            	break;

		            case self::ControlChar:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(837);
		            	$this->match(self::ControlChar);
		            	break;

		            case self::DecimalDigit:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(838);
		            	$this->match(self::DecimalDigit);
		            	break;

		            case self::NotDecimalDigit:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(839);
		            	$this->match(self::NotDecimalDigit);
		            	break;

		            case self::HorizontalWhiteSpace:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(840);
		            	$this->match(self::HorizontalWhiteSpace);
		            	break;

		            case self::NotHorizontalWhiteSpace:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(841);
		            	$this->match(self::NotHorizontalWhiteSpace);
		            	break;

		            case self::NotNewLine:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(842);
		            	$this->match(self::NotNewLine);
		            	break;

		            case self::CharWithProperty:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(843);
		            	$this->match(self::CharWithProperty);
		            	break;

		            case self::CharWithoutProperty:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(844);
		            	$this->match(self::CharWithoutProperty);
		            	break;

		            case self::NewLineSequence:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(845);
		            	$this->match(self::NewLineSequence);
		            	break;

		            case self::WhiteSpace:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(846);
		            	$this->match(self::WhiteSpace);
		            	break;

		            case self::NotWhiteSpace:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(847);
		            	$this->match(self::NotWhiteSpace);
		            	break;

		            case self::VerticalWhiteSpace:
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(848);
		            	$this->match(self::VerticalWhiteSpace);
		            	break;

		            case self::NotVerticalWhiteSpace:
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(849);
		            	$this->match(self::NotVerticalWhiteSpace);
		            	break;

		            case self::WordChar:
		            	$this->enterOuterAlt($localContext, 16);
		            	$this->setState(850);
		            	$this->match(self::WordChar);
		            	break;

		            case self::NotWordChar:
		            	$this->enterOuterAlt($localContext, 17);
		            	$this->setState(851);
		            	$this->match(self::NotWordChar);
		            	break;

		            case self::Backslash:
		            	$this->enterOuterAlt($localContext, 18);
		            	$this->setState(852);
		            	$this->match(self::Backslash);
		            	$this->setState(853);
		            	$this->matchWildcard();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function literal(): Context\LiteralContext
		{
		    $localContext = new Context\LiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 48, self::RULE_literal);

		    try {
		        $this->setState(858);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::Quoted:
		            case self::BlockQuoted:
		            case self::BellChar:
		            case self::EscapeChar:
		            case self::FormFeed:
		            case self::NewLine:
		            case self::CarriageReturn:
		            case self::Tab:
		            case self::Backslash:
		            case self::HexChar:
		            case self::Hyphen:
		            case self::OpenBrace:
		            case self::CloseBrace:
		            case self::Comma:
		            case self::LessThan:
		            case self::GreaterThan:
		            case self::SingleQuote:
		            case self::Underscore:
		            case self::Colon:
		            case self::Hash:
		            case self::Equals:
		            case self::Exclamation:
		            case self::Ampersand:
		            case self::ALC:
		            case self::BLC:
		            case self::CLC:
		            case self::DLC:
		            case self::ELC:
		            case self::FLC:
		            case self::GLC:
		            case self::HLC:
		            case self::ILC:
		            case self::JLC:
		            case self::KLC:
		            case self::LLC:
		            case self::MLC:
		            case self::NLC:
		            case self::OLC:
		            case self::PLC:
		            case self::QLC:
		            case self::RLC:
		            case self::SLC:
		            case self::TLC:
		            case self::ULC:
		            case self::VLC:
		            case self::WLC:
		            case self::XLC:
		            case self::YLC:
		            case self::ZLC:
		            case self::AUC:
		            case self::BUC:
		            case self::CUC:
		            case self::DUC:
		            case self::EUC:
		            case self::FUC:
		            case self::GUC:
		            case self::HUC:
		            case self::IUC:
		            case self::JUC:
		            case self::KUC:
		            case self::LUC:
		            case self::MUC:
		            case self::NUC:
		            case self::OUC:
		            case self::PUC:
		            case self::QUC:
		            case self::RUC:
		            case self::SUC:
		            case self::TUC:
		            case self::UUC:
		            case self::VUC:
		            case self::WUC:
		            case self::XUC:
		            case self::YUC:
		            case self::ZUC:
		            case self::D1:
		            case self::D2:
		            case self::D3:
		            case self::D4:
		            case self::D5:
		            case self::D6:
		            case self::D7:
		            case self::D8:
		            case self::D9:
		            case self::D0:
		            case self::OtherChar:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(856);
		            	$this->shared_literal();
		            	break;

		            case self::CharacterClassEnd:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(857);
		            	$this->match(self::CharacterClassEnd);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cc_literal(): Context\Cc_literalContext
		{
		    $localContext = new Context\Cc_literalContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 50, self::RULE_cc_literal);

		    try {
		        $this->setState(872);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::Quoted:
		            case self::BlockQuoted:
		            case self::BellChar:
		            case self::EscapeChar:
		            case self::FormFeed:
		            case self::NewLine:
		            case self::CarriageReturn:
		            case self::Tab:
		            case self::Backslash:
		            case self::HexChar:
		            case self::Hyphen:
		            case self::OpenBrace:
		            case self::CloseBrace:
		            case self::Comma:
		            case self::LessThan:
		            case self::GreaterThan:
		            case self::SingleQuote:
		            case self::Underscore:
		            case self::Colon:
		            case self::Hash:
		            case self::Equals:
		            case self::Exclamation:
		            case self::Ampersand:
		            case self::ALC:
		            case self::BLC:
		            case self::CLC:
		            case self::DLC:
		            case self::ELC:
		            case self::FLC:
		            case self::GLC:
		            case self::HLC:
		            case self::ILC:
		            case self::JLC:
		            case self::KLC:
		            case self::LLC:
		            case self::MLC:
		            case self::NLC:
		            case self::OLC:
		            case self::PLC:
		            case self::QLC:
		            case self::RLC:
		            case self::SLC:
		            case self::TLC:
		            case self::ULC:
		            case self::VLC:
		            case self::WLC:
		            case self::XLC:
		            case self::YLC:
		            case self::ZLC:
		            case self::AUC:
		            case self::BUC:
		            case self::CUC:
		            case self::DUC:
		            case self::EUC:
		            case self::FUC:
		            case self::GUC:
		            case self::HUC:
		            case self::IUC:
		            case self::JUC:
		            case self::KUC:
		            case self::LUC:
		            case self::MUC:
		            case self::NUC:
		            case self::OUC:
		            case self::PUC:
		            case self::QUC:
		            case self::RUC:
		            case self::SUC:
		            case self::TUC:
		            case self::UUC:
		            case self::VUC:
		            case self::WUC:
		            case self::XUC:
		            case self::YUC:
		            case self::ZUC:
		            case self::D1:
		            case self::D2:
		            case self::D3:
		            case self::D4:
		            case self::D5:
		            case self::D6:
		            case self::D7:
		            case self::D8:
		            case self::D9:
		            case self::D0:
		            case self::OtherChar:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(860);
		            	$this->shared_literal();
		            	break;

		            case self::Dot:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(861);
		            	$this->match(self::Dot);
		            	break;

		            case self::CharacterClassStart:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(862);
		            	$this->match(self::CharacterClassStart);
		            	break;

		            case self::Caret:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(863);
		            	$this->match(self::Caret);
		            	break;

		            case self::QuestionMark:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(864);
		            	$this->match(self::QuestionMark);
		            	break;

		            case self::Plus:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(865);
		            	$this->match(self::Plus);
		            	break;

		            case self::Star:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(866);
		            	$this->match(self::Star);
		            	break;

		            case self::WordBoundary:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(867);
		            	$this->match(self::WordBoundary);
		            	break;

		            case self::EndOfSubjectOrLine:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(868);
		            	$this->match(self::EndOfSubjectOrLine);
		            	break;

		            case self::Pipe:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(869);
		            	$this->match(self::Pipe);
		            	break;

		            case self::OpenParen:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(870);
		            	$this->match(self::OpenParen);
		            	break;

		            case self::CloseParen:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(871);
		            	$this->match(self::CloseParen);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function shared_literal(): Context\Shared_literalContext
		{
		    $localContext = new Context\Shared_literalContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 52, self::RULE_shared_literal);

		    try {
		        $this->setState(900);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::Backslash:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(874);
		            	$this->octal_char();
		            	break;

		            case self::ALC:
		            case self::BLC:
		            case self::CLC:
		            case self::DLC:
		            case self::ELC:
		            case self::FLC:
		            case self::GLC:
		            case self::HLC:
		            case self::ILC:
		            case self::JLC:
		            case self::KLC:
		            case self::LLC:
		            case self::MLC:
		            case self::NLC:
		            case self::OLC:
		            case self::PLC:
		            case self::QLC:
		            case self::RLC:
		            case self::SLC:
		            case self::TLC:
		            case self::ULC:
		            case self::VLC:
		            case self::WLC:
		            case self::XLC:
		            case self::YLC:
		            case self::ZLC:
		            case self::AUC:
		            case self::BUC:
		            case self::CUC:
		            case self::DUC:
		            case self::EUC:
		            case self::FUC:
		            case self::GUC:
		            case self::HUC:
		            case self::IUC:
		            case self::JUC:
		            case self::KUC:
		            case self::LUC:
		            case self::MUC:
		            case self::NUC:
		            case self::OUC:
		            case self::PUC:
		            case self::QUC:
		            case self::RUC:
		            case self::SUC:
		            case self::TUC:
		            case self::UUC:
		            case self::VUC:
		            case self::WUC:
		            case self::XUC:
		            case self::YUC:
		            case self::ZUC:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(875);
		            	$this->letter();
		            	break;

		            case self::D1:
		            case self::D2:
		            case self::D3:
		            case self::D4:
		            case self::D5:
		            case self::D6:
		            case self::D7:
		            case self::D8:
		            case self::D9:
		            case self::D0:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(876);
		            	$this->digit();
		            	break;

		            case self::BellChar:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(877);
		            	$this->match(self::BellChar);
		            	break;

		            case self::EscapeChar:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(878);
		            	$this->match(self::EscapeChar);
		            	break;

		            case self::FormFeed:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(879);
		            	$this->match(self::FormFeed);
		            	break;

		            case self::NewLine:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(880);
		            	$this->match(self::NewLine);
		            	break;

		            case self::CarriageReturn:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(881);
		            	$this->match(self::CarriageReturn);
		            	break;

		            case self::Tab:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(882);
		            	$this->match(self::Tab);
		            	break;

		            case self::HexChar:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(883);
		            	$this->match(self::HexChar);
		            	break;

		            case self::Quoted:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(884);
		            	$this->match(self::Quoted);
		            	break;

		            case self::BlockQuoted:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(885);
		            	$this->match(self::BlockQuoted);
		            	break;

		            case self::OpenBrace:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(886);
		            	$this->match(self::OpenBrace);
		            	break;

		            case self::CloseBrace:
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(887);
		            	$this->match(self::CloseBrace);
		            	break;

		            case self::Comma:
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(888);
		            	$this->match(self::Comma);
		            	break;

		            case self::Hyphen:
		            	$this->enterOuterAlt($localContext, 16);
		            	$this->setState(889);
		            	$this->match(self::Hyphen);
		            	break;

		            case self::LessThan:
		            	$this->enterOuterAlt($localContext, 17);
		            	$this->setState(890);
		            	$this->match(self::LessThan);
		            	break;

		            case self::GreaterThan:
		            	$this->enterOuterAlt($localContext, 18);
		            	$this->setState(891);
		            	$this->match(self::GreaterThan);
		            	break;

		            case self::SingleQuote:
		            	$this->enterOuterAlt($localContext, 19);
		            	$this->setState(892);
		            	$this->match(self::SingleQuote);
		            	break;

		            case self::Underscore:
		            	$this->enterOuterAlt($localContext, 20);
		            	$this->setState(893);
		            	$this->match(self::Underscore);
		            	break;

		            case self::Colon:
		            	$this->enterOuterAlt($localContext, 21);
		            	$this->setState(894);
		            	$this->match(self::Colon);
		            	break;

		            case self::Hash:
		            	$this->enterOuterAlt($localContext, 22);
		            	$this->setState(895);
		            	$this->match(self::Hash);
		            	break;

		            case self::Equals:
		            	$this->enterOuterAlt($localContext, 23);
		            	$this->setState(896);
		            	$this->match(self::Equals);
		            	break;

		            case self::Exclamation:
		            	$this->enterOuterAlt($localContext, 24);
		            	$this->setState(897);
		            	$this->match(self::Exclamation);
		            	break;

		            case self::Ampersand:
		            	$this->enterOuterAlt($localContext, 25);
		            	$this->setState(898);
		            	$this->match(self::Ampersand);
		            	break;

		            case self::OtherChar:
		            	$this->enterOuterAlt($localContext, 26);
		            	$this->setState(899);
		            	$this->match(self::OtherChar);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function number(): Context\NumberContext
		{
		    $localContext = new Context\NumberContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 54, self::RULE_number);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(902);
		        $this->digits();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function octal_char(): Context\Octal_charContext
		{
		    $localContext = new Context\Octal_charContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 56, self::RULE_octal_char);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(913);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 43, $this->ctx)) {
		        	case 1:
		        	    $this->setState(904);
		        	    $this->match(self::Backslash);
		        	    $this->setState(905);

		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 115)) & ~0x3f) === 0 && ((1 << ($_la - 115)) & ((1 << (self::D1 - 115)) | (1 << (self::D2 - 115)) | (1 << (self::D3 - 115)) | (1 << (self::D0 - 115)))) !== 0))) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(906);
		        	    $this->octal_digit();
		        	    $this->setState(907);
		        	    $this->octal_digit();
		        	break;

		        	case 2:
		        	    $this->setState(909);
		        	    $this->match(self::Backslash);
		        	    $this->setState(910);
		        	    $this->octal_digit();
		        	    $this->setState(911);
		        	    $this->octal_digit();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function octal_digit(): Context\Octal_digitContext
		{
		    $localContext = new Context\Octal_digitContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 58, self::RULE_octal_digit);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(915);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 115)) & ~0x3f) === 0 && ((1 << ($_la - 115)) & ((1 << (self::D1 - 115)) | (1 << (self::D2 - 115)) | (1 << (self::D3 - 115)) | (1 << (self::D4 - 115)) | (1 << (self::D5 - 115)) | (1 << (self::D6 - 115)) | (1 << (self::D7 - 115)) | (1 << (self::D0 - 115)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function digits(): Context\DigitsContext
		{
		    $localContext = new Context\DigitsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 60, self::RULE_digits);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(918); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(917);
		        		$this->digit();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(920); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 44, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function digit(): Context\DigitContext
		{
		    $localContext = new Context\DigitContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 62, self::RULE_digit);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(922);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 115)) & ~0x3f) === 0 && ((1 << ($_la - 115)) & ((1 << (self::D1 - 115)) | (1 << (self::D2 - 115)) | (1 << (self::D3 - 115)) | (1 << (self::D4 - 115)) | (1 << (self::D5 - 115)) | (1 << (self::D6 - 115)) | (1 << (self::D7 - 115)) | (1 << (self::D8 - 115)) | (1 << (self::D9 - 115)) | (1 << (self::D0 - 115)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function name(): Context\NameContext
		{
		    $localContext = new Context\NameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 64, self::RULE_name);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(924);
		        $this->alpha_nums();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alpha_nums(): Context\Alpha_numsContext
		{
		    $localContext = new Context\Alpha_numsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 66, self::RULE_alpha_nums);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(928);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALC:
		            case self::BLC:
		            case self::CLC:
		            case self::DLC:
		            case self::ELC:
		            case self::FLC:
		            case self::GLC:
		            case self::HLC:
		            case self::ILC:
		            case self::JLC:
		            case self::KLC:
		            case self::LLC:
		            case self::MLC:
		            case self::NLC:
		            case self::OLC:
		            case self::PLC:
		            case self::QLC:
		            case self::RLC:
		            case self::SLC:
		            case self::TLC:
		            case self::ULC:
		            case self::VLC:
		            case self::WLC:
		            case self::XLC:
		            case self::YLC:
		            case self::ZLC:
		            case self::AUC:
		            case self::BUC:
		            case self::CUC:
		            case self::DUC:
		            case self::EUC:
		            case self::FUC:
		            case self::GUC:
		            case self::HUC:
		            case self::IUC:
		            case self::JUC:
		            case self::KUC:
		            case self::LUC:
		            case self::MUC:
		            case self::NUC:
		            case self::OUC:
		            case self::PUC:
		            case self::QUC:
		            case self::RUC:
		            case self::SUC:
		            case self::TUC:
		            case self::UUC:
		            case self::VUC:
		            case self::WUC:
		            case self::XUC:
		            case self::YUC:
		            case self::ZUC:
		            	$this->setState(926);
		            	$this->letter();
		            	break;

		            case self::Underscore:
		            	$this->setState(927);
		            	$this->match(self::Underscore);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(935);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::Underscore || $_la === self::ALC || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)))) !== 0)) {
		        	$this->setState(933);
		        	$this->errorHandler->sync($this);

		        	switch ($this->input->LA(1)) {
		        	    case self::ALC:
		        	    case self::BLC:
		        	    case self::CLC:
		        	    case self::DLC:
		        	    case self::ELC:
		        	    case self::FLC:
		        	    case self::GLC:
		        	    case self::HLC:
		        	    case self::ILC:
		        	    case self::JLC:
		        	    case self::KLC:
		        	    case self::LLC:
		        	    case self::MLC:
		        	    case self::NLC:
		        	    case self::OLC:
		        	    case self::PLC:
		        	    case self::QLC:
		        	    case self::RLC:
		        	    case self::SLC:
		        	    case self::TLC:
		        	    case self::ULC:
		        	    case self::VLC:
		        	    case self::WLC:
		        	    case self::XLC:
		        	    case self::YLC:
		        	    case self::ZLC:
		        	    case self::AUC:
		        	    case self::BUC:
		        	    case self::CUC:
		        	    case self::DUC:
		        	    case self::EUC:
		        	    case self::FUC:
		        	    case self::GUC:
		        	    case self::HUC:
		        	    case self::IUC:
		        	    case self::JUC:
		        	    case self::KUC:
		        	    case self::LUC:
		        	    case self::MUC:
		        	    case self::NUC:
		        	    case self::OUC:
		        	    case self::PUC:
		        	    case self::QUC:
		        	    case self::RUC:
		        	    case self::SUC:
		        	    case self::TUC:
		        	    case self::UUC:
		        	    case self::VUC:
		        	    case self::WUC:
		        	    case self::XUC:
		        	    case self::YUC:
		        	    case self::ZUC:
		        	    	$this->setState(930);
		        	    	$this->letter();
		        	    	break;

		        	    case self::Underscore:
		        	    	$this->setState(931);
		        	    	$this->match(self::Underscore);
		        	    	break;

		        	    case self::D1:
		        	    case self::D2:
		        	    case self::D3:
		        	    case self::D4:
		        	    case self::D5:
		        	    case self::D6:
		        	    case self::D7:
		        	    case self::D8:
		        	    case self::D9:
		        	    case self::D0:
		        	    	$this->setState(932);
		        	    	$this->digit();
		        	    	break;

		        	default:
		        		throw new NoViableAltException($this);
		        	}
		        	$this->setState(937);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function non_close_parens(): Context\Non_close_parensContext
		{
		    $localContext = new Context\Non_close_parensContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 68, self::RULE_non_close_parens);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(939); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(938);
		        	$this->non_close_paren();
		        	$this->setState(941); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::Quoted) | (1 << self::BlockQuoted) | (1 << self::BellChar) | (1 << self::ControlChar) | (1 << self::EscapeChar) | (1 << self::FormFeed) | (1 << self::NewLine) | (1 << self::CarriageReturn) | (1 << self::Tab) | (1 << self::Backslash) | (1 << self::HexChar) | (1 << self::Dot) | (1 << self::OneDataUnit) | (1 << self::DecimalDigit) | (1 << self::NotDecimalDigit) | (1 << self::HorizontalWhiteSpace) | (1 << self::NotHorizontalWhiteSpace) | (1 << self::NotNewLine) | (1 << self::CharWithProperty) | (1 << self::CharWithoutProperty) | (1 << self::NewLineSequence) | (1 << self::WhiteSpace) | (1 << self::NotWhiteSpace) | (1 << self::VerticalWhiteSpace) | (1 << self::NotVerticalWhiteSpace) | (1 << self::WordChar) | (1 << self::NotWordChar) | (1 << self::ExtendedUnicodeChar) | (1 << self::CharacterClassStart) | (1 << self::CharacterClassEnd) | (1 << self::Caret) | (1 << self::Hyphen) | (1 << self::POSIXNamedSet) | (1 << self::POSIXNegatedNamedSet) | (1 << self::QuestionMark) | (1 << self::Plus) | (1 << self::Star) | (1 << self::OpenBrace) | (1 << self::CloseBrace) | (1 << self::Comma) | (1 << self::WordBoundary) | (1 << self::NonWordBoundary) | (1 << self::StartOfSubject) | (1 << self::EndOfSubjectOrLine) | (1 << self::EndOfSubjectOrLineEndOfSubject) | (1 << self::EndOfSubject) | (1 << self::PreviousMatchInSubject) | (1 << self::ResetStartMatch) | (1 << self::SubroutineOrNamedReferenceStartG) | (1 << self::NamedReferenceStartK) | (1 << self::Pipe) | (1 << self::OpenParen) | (1 << self::LessThan) | (1 << self::GreaterThan) | (1 << self::SingleQuote) | (1 << self::Underscore) | (1 << self::Colon) | (1 << self::Hash) | (1 << self::Equals) | (1 << self::Exclamation) | (1 << self::Ampersand) | (1 << self::ALC))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::BLC - 64)) | (1 << (self::CLC - 64)) | (1 << (self::DLC - 64)) | (1 << (self::ELC - 64)) | (1 << (self::FLC - 64)) | (1 << (self::GLC - 64)) | (1 << (self::HLC - 64)) | (1 << (self::ILC - 64)) | (1 << (self::JLC - 64)) | (1 << (self::KLC - 64)) | (1 << (self::LLC - 64)) | (1 << (self::MLC - 64)) | (1 << (self::NLC - 64)) | (1 << (self::OLC - 64)) | (1 << (self::PLC - 64)) | (1 << (self::QLC - 64)) | (1 << (self::RLC - 64)) | (1 << (self::SLC - 64)) | (1 << (self::TLC - 64)) | (1 << (self::ULC - 64)) | (1 << (self::VLC - 64)) | (1 << (self::WLC - 64)) | (1 << (self::XLC - 64)) | (1 << (self::YLC - 64)) | (1 << (self::ZLC - 64)) | (1 << (self::AUC - 64)) | (1 << (self::BUC - 64)) | (1 << (self::CUC - 64)) | (1 << (self::DUC - 64)) | (1 << (self::EUC - 64)) | (1 << (self::FUC - 64)) | (1 << (self::GUC - 64)) | (1 << (self::HUC - 64)) | (1 << (self::IUC - 64)) | (1 << (self::JUC - 64)) | (1 << (self::KUC - 64)) | (1 << (self::LUC - 64)) | (1 << (self::MUC - 64)) | (1 << (self::NUC - 64)) | (1 << (self::OUC - 64)) | (1 << (self::PUC - 64)) | (1 << (self::QUC - 64)) | (1 << (self::RUC - 64)) | (1 << (self::SUC - 64)) | (1 << (self::TUC - 64)) | (1 << (self::UUC - 64)) | (1 << (self::VUC - 64)) | (1 << (self::WUC - 64)) | (1 << (self::XUC - 64)) | (1 << (self::YUC - 64)) | (1 << (self::ZUC - 64)) | (1 << (self::D1 - 64)) | (1 << (self::D2 - 64)) | (1 << (self::D3 - 64)) | (1 << (self::D4 - 64)) | (1 << (self::D5 - 64)) | (1 << (self::D6 - 64)) | (1 << (self::D7 - 64)) | (1 << (self::D8 - 64)) | (1 << (self::D9 - 64)) | (1 << (self::D0 - 64)) | (1 << (self::OtherChar - 64)))) !== 0));
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function non_close_paren(): Context\Non_close_parenContext
		{
		    $localContext = new Context\Non_close_parenContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 70, self::RULE_non_close_paren);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(943);

		        $_la = $this->input->LA(1);

		        if ($_la <= 0 || ($_la === self::CloseParen)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function letter(): Context\LetterContext
		{
		    $localContext = new Context\LetterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 72, self::RULE_letter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(945);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 63)) & ~0x3f) === 0 && ((1 << ($_la - 63)) & ((1 << (self::ALC - 63)) | (1 << (self::BLC - 63)) | (1 << (self::CLC - 63)) | (1 << (self::DLC - 63)) | (1 << (self::ELC - 63)) | (1 << (self::FLC - 63)) | (1 << (self::GLC - 63)) | (1 << (self::HLC - 63)) | (1 << (self::ILC - 63)) | (1 << (self::JLC - 63)) | (1 << (self::KLC - 63)) | (1 << (self::LLC - 63)) | (1 << (self::MLC - 63)) | (1 << (self::NLC - 63)) | (1 << (self::OLC - 63)) | (1 << (self::PLC - 63)) | (1 << (self::QLC - 63)) | (1 << (self::RLC - 63)) | (1 << (self::SLC - 63)) | (1 << (self::TLC - 63)) | (1 << (self::ULC - 63)) | (1 << (self::VLC - 63)) | (1 << (self::WLC - 63)) | (1 << (self::XLC - 63)) | (1 << (self::YLC - 63)) | (1 << (self::ZLC - 63)) | (1 << (self::AUC - 63)) | (1 << (self::BUC - 63)) | (1 << (self::CUC - 63)) | (1 << (self::DUC - 63)) | (1 << (self::EUC - 63)) | (1 << (self::FUC - 63)) | (1 << (self::GUC - 63)) | (1 << (self::HUC - 63)) | (1 << (self::IUC - 63)) | (1 << (self::JUC - 63)) | (1 << (self::KUC - 63)) | (1 << (self::LUC - 63)) | (1 << (self::MUC - 63)) | (1 << (self::NUC - 63)) | (1 << (self::OUC - 63)) | (1 << (self::PUC - 63)) | (1 << (self::QUC - 63)) | (1 << (self::RUC - 63)) | (1 << (self::SUC - 63)) | (1 << (self::TUC - 63)) | (1 << (self::UUC - 63)) | (1 << (self::VUC - 63)) | (1 << (self::WUC - 63)) | (1 << (self::XUC - 63)) | (1 << (self::YUC - 63)) | (1 << (self::ZUC - 63)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}
	}
}

namespace PCRE\Context {
	use Antlr\Antlr4\Runtime\ParserRuleContext;
	use Antlr\Antlr4\Runtime\Token;
	use Antlr\Antlr4\Runtime\Tree\ParseTreeVisitor;
	use Antlr\Antlr4\Runtime\Tree\TerminalNode;
	use Antlr\Antlr4\Runtime\Tree\ParseTreeListener;
	use PCRE\PCREParser;
	use PCRE\PCREListener;

	class ParseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_parse;
	    }

	    public function alternation(): ?AlternationContext
	    {
	    	return $this->getTypedRuleContext(AlternationContext::class, 0);
	    }

	    public function EOF(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EOF, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterParse($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitParse($this);
		    }
		}
	} 

	class AlternationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_alternation;
	    }

	    /**
	     * @return array<ExprContext>|ExprContext|null
	     */
	    public function expr(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExprContext::class);
	    	}

	        return $this->getTypedRuleContext(ExprContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function Pipe(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::Pipe);
	    	}

	        return $this->getToken(PCREParser::Pipe, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterAlternation($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitAlternation($this);
		    }
		}
	} 

	class ExprContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_expr;
	    }

	    /**
	     * @return array<ElementContext>|ElementContext|null
	     */
	    public function element(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ElementContext::class);
	    	}

	        return $this->getTypedRuleContext(ElementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterExpr($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitExpr($this);
		    }
		}
	} 

	class ElementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_element;
	    }

	    public function atom(): ?AtomContext
	    {
	    	return $this->getTypedRuleContext(AtomContext::class, 0);
	    }

	    public function quantifier(): ?QuantifierContext
	    {
	    	return $this->getTypedRuleContext(QuantifierContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitElement($this);
		    }
		}
	} 

	class QuantifierContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_quantifier;
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function quantifier_type(): ?Quantifier_typeContext
	    {
	    	return $this->getTypedRuleContext(Quantifier_typeContext::class, 0);
	    }

	    public function Plus(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Plus, 0);
	    }

	    public function Star(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Star, 0);
	    }

	    public function OpenBrace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenBrace, 0);
	    }

	    /**
	     * @return array<NumberContext>|NumberContext|null
	     */
	    public function number(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(NumberContext::class);
	    	}

	        return $this->getTypedRuleContext(NumberContext::class, $index);
	    }

	    public function CloseBrace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseBrace, 0);
	    }

	    public function Comma(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Comma, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterQuantifier($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitQuantifier($this);
		    }
		}
	} 

	class Quantifier_typeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_quantifier_type;
	    }

	    public function Plus(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Plus, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterQuantifier_type($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitQuantifier_type($this);
		    }
		}
	} 

	class Character_classContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_character_class;
	    }

	    public function CharacterClassStart(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CharacterClassStart, 0);
	    }

	    public function Caret(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Caret, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function CharacterClassEnd(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::CharacterClassEnd);
	    	}

	        return $this->getToken(PCREParser::CharacterClassEnd, $index);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    /**
	     * @return array<Cc_atomContext>|Cc_atomContext|null
	     */
	    public function cc_atom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(Cc_atomContext::class);
	    	}

	        return $this->getTypedRuleContext(Cc_atomContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterCharacter_class($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitCharacter_class($this);
		    }
		}
	} 

	class BackreferenceContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_backreference;
	    }

	    public function backreference_or_octal(): ?Backreference_or_octalContext
	    {
	    	return $this->getTypedRuleContext(Backreference_or_octalContext::class, 0);
	    }

	    public function SubroutineOrNamedReferenceStartG(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SubroutineOrNamedReferenceStartG, 0);
	    }

	    public function number(): ?NumberContext
	    {
	    	return $this->getTypedRuleContext(NumberContext::class, 0);
	    }

	    public function OpenBrace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenBrace, 0);
	    }

	    public function CloseBrace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseBrace, 0);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    public function NamedReferenceStartK(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NamedReferenceStartK, 0);
	    }

	    public function LessThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LessThan, 0);
	    }

	    public function name(): ?NameContext
	    {
	    	return $this->getTypedRuleContext(NameContext::class, 0);
	    }

	    public function GreaterThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GreaterThan, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SingleQuote(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::SingleQuote);
	    	}

	        return $this->getToken(PCREParser::SingleQuote, $index);
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function PUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PUC, 0);
	    }

	    public function Equals(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Equals, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterBackreference($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitBackreference($this);
		    }
		}
	} 

	class Backreference_or_octalContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_backreference_or_octal;
	    }

	    public function octal_char(): ?Octal_charContext
	    {
	    	return $this->getTypedRuleContext(Octal_charContext::class, 0);
	    }

	    public function Backslash(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Backslash, 0);
	    }

	    public function digit(): ?DigitContext
	    {
	    	return $this->getTypedRuleContext(DigitContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterBackreference_or_octal($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitBackreference_or_octal($this);
		    }
		}
	} 

	class CaptureContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_capture;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function LessThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LessThan, 0);
	    }

	    public function name(): ?NameContext
	    {
	    	return $this->getTypedRuleContext(NameContext::class, 0);
	    }

	    public function GreaterThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GreaterThan, 0);
	    }

	    public function alternation(): ?AlternationContext
	    {
	    	return $this->getTypedRuleContext(AlternationContext::class, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SingleQuote(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::SingleQuote);
	    	}

	        return $this->getToken(PCREParser::SingleQuote, $index);
	    }

	    public function PUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PUC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterCapture($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitCapture($this);
		    }
		}
	} 

	class Non_captureContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_non_capture;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function Colon(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Colon, 0);
	    }

	    public function alternation(): ?AlternationContext
	    {
	    	return $this->getTypedRuleContext(AlternationContext::class, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function Pipe(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Pipe, 0);
	    }

	    public function GreaterThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GreaterThan, 0);
	    }

	    public function option_flags(): ?Option_flagsContext
	    {
	    	return $this->getTypedRuleContext(Option_flagsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterNon_capture($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitNon_capture($this);
		    }
		}
	} 

	class CommentContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_comment;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function Hash(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hash, 0);
	    }

	    public function non_close_parens(): ?Non_close_parensContext
	    {
	    	return $this->getTypedRuleContext(Non_close_parensContext::class, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterComment($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitComment($this);
		    }
		}
	} 

	class OptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_option;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    /**
	     * @return array<Option_flagsContext>|Option_flagsContext|null
	     */
	    public function option_flags(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(Option_flagsContext::class);
	    	}

	        return $this->getTypedRuleContext(Option_flagsContext::class, $index);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function Star(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Star, 0);
	    }

	    public function NUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NUC, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function OUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::OUC);
	    	}

	        return $this->getToken(PCREParser::OUC, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function Underscore(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::Underscore);
	    	}

	        return $this->getToken(PCREParser::Underscore, $index);
	    }

	    public function SUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SUC, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function TUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::TUC);
	    	}

	        return $this->getToken(PCREParser::TUC, $index);
	    }

	    public function AUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::AUC, 0);
	    }

	    public function RUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RUC, 0);
	    }

	    public function PUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PUC, 0);
	    }

	    public function UUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::UUC, 0);
	    }

	    public function FUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FUC, 0);
	    }

	    public function D8(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D8, 0);
	    }

	    public function D1(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D1, 0);
	    }

	    public function D6(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D6, 0);
	    }

	    public function CUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CUC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitOption($this);
		    }
		}
	} 

	class Option_flagsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_option_flags;
	    }

	    /**
	     * @return array<Option_flagContext>|Option_flagContext|null
	     */
	    public function option_flag(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(Option_flagContext::class);
	    	}

	        return $this->getTypedRuleContext(Option_flagContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterOption_flags($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitOption_flags($this);
		    }
		}
	} 

	class Option_flagContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_option_flag;
	    }

	    public function ILC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ILC, 0);
	    }

	    public function JUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::JUC, 0);
	    }

	    public function MLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::MLC, 0);
	    }

	    public function SLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SLC, 0);
	    }

	    public function UUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::UUC, 0);
	    }

	    public function XLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::XLC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterOption_flag($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitOption_flag($this);
		    }
		}
	} 

	class Look_aroundContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_look_around;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function Equals(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Equals, 0);
	    }

	    public function alternation(): ?AlternationContext
	    {
	    	return $this->getTypedRuleContext(AlternationContext::class, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function Exclamation(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Exclamation, 0);
	    }

	    public function LessThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LessThan, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterLook_around($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitLook_around($this);
		    }
		}
	} 

	class Subroutine_referenceContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_subroutine_reference;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function RUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RUC, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function number(): ?NumberContext
	    {
	    	return $this->getTypedRuleContext(NumberContext::class, 0);
	    }

	    public function Plus(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Plus, 0);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    public function Ampersand(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Ampersand, 0);
	    }

	    public function name(): ?NameContext
	    {
	    	return $this->getTypedRuleContext(NameContext::class, 0);
	    }

	    public function PUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PUC, 0);
	    }

	    public function GreaterThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GreaterThan, 0);
	    }

	    public function SubroutineOrNamedReferenceStartG(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SubroutineOrNamedReferenceStartG, 0);
	    }

	    public function LessThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LessThan, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SingleQuote(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::SingleQuote);
	    	}

	        return $this->getToken(PCREParser::SingleQuote, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterSubroutine_reference($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitSubroutine_reference($this);
		    }
		}
	} 

	class ConditionalContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_conditional;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function OpenParen(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::OpenParen);
	    	}

	        return $this->getToken(PCREParser::OpenParen, $index);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function number(): ?NumberContext
	    {
	    	return $this->getTypedRuleContext(NumberContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function CloseParen(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::CloseParen);
	    	}

	        return $this->getToken(PCREParser::CloseParen, $index);
	    }

	    /**
	     * @return array<AlternationContext>|AlternationContext|null
	     */
	    public function alternation(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(AlternationContext::class);
	    	}

	        return $this->getTypedRuleContext(AlternationContext::class, $index);
	    }

	    public function Pipe(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Pipe, 0);
	    }

	    public function Plus(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Plus, 0);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    public function LessThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LessThan, 0);
	    }

	    public function name(): ?NameContext
	    {
	    	return $this->getTypedRuleContext(NameContext::class, 0);
	    }

	    public function GreaterThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GreaterThan, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SingleQuote(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::SingleQuote);
	    	}

	        return $this->getToken(PCREParser::SingleQuote, $index);
	    }

	    public function RUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RUC, 0);
	    }

	    public function Ampersand(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Ampersand, 0);
	    }

	    public function DUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::DUC, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::EUC);
	    	}

	        return $this->getToken(PCREParser::EUC, $index);
	    }

	    public function FUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FUC, 0);
	    }

	    public function IUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::IUC, 0);
	    }

	    public function NUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NUC, 0);
	    }

	    public function ALC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ALC, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SLC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::SLC);
	    	}

	        return $this->getToken(PCREParser::SLC, $index);
	    }

	    public function ELC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ELC, 0);
	    }

	    public function RLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RLC, 0);
	    }

	    public function TLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::TLC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterConditional($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitConditional($this);
		    }
		}
	} 

	class Backtrack_controlContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_backtrack_control;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function Star(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Star, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function AUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::AUC);
	    	}

	        return $this->getToken(PCREParser::AUC, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function CUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::CUC);
	    	}

	        return $this->getToken(PCREParser::CUC, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::EUC);
	    	}

	        return $this->getToken(PCREParser::EUC, $index);
	    }

	    public function PUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PUC, 0);
	    }

	    public function TUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::TUC, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function FUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FUC, 0);
	    }

	    public function IUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::IUC, 0);
	    }

	    public function LUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LUC, 0);
	    }

	    public function Colon(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Colon, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function NUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::NUC);
	    	}

	        return $this->getToken(PCREParser::NUC, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function MUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::MUC);
	    	}

	        return $this->getToken(PCREParser::MUC, $index);
	    }

	    public function RUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RUC, 0);
	    }

	    public function KUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::KUC, 0);
	    }

	    public function OUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OUC, 0);
	    }

	    public function UUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::UUC, 0);
	    }

	    public function SUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SUC, 0);
	    }

	    public function HUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::HUC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterBacktrack_control($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitBacktrack_control($this);
		    }
		}
	} 

	class Newline_conventionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_newline_convention;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function Star(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Star, 0);
	    }

	    public function CUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CUC, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RUC(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::RUC);
	    	}

	        return $this->getToken(PCREParser::RUC, $index);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function LUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LUC, 0);
	    }

	    public function FUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FUC, 0);
	    }

	    public function AUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::AUC, 0);
	    }

	    public function NUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NUC, 0);
	    }

	    public function YUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::YUC, 0);
	    }

	    public function BUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::BUC, 0);
	    }

	    public function SUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SUC, 0);
	    }

	    public function Underscore(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Underscore, 0);
	    }

	    public function UUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::UUC, 0);
	    }

	    public function IUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::IUC, 0);
	    }

	    public function OUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OUC, 0);
	    }

	    public function DUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::DUC, 0);
	    }

	    public function EUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EUC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterNewline_convention($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitNewline_convention($this);
		    }
		}
	} 

	class CalloutContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_callout;
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function CUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CUC, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

	    public function number(): ?NumberContext
	    {
	    	return $this->getTypedRuleContext(NumberContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterCallout($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitCallout($this);
		    }
		}
	} 

	class AtomContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_atom;
	    }

	    public function subroutine_reference(): ?Subroutine_referenceContext
	    {
	    	return $this->getTypedRuleContext(Subroutine_referenceContext::class, 0);
	    }

	    public function shared_atom(): ?Shared_atomContext
	    {
	    	return $this->getTypedRuleContext(Shared_atomContext::class, 0);
	    }

	    public function literal(): ?LiteralContext
	    {
	    	return $this->getTypedRuleContext(LiteralContext::class, 0);
	    }

	    public function character_class(): ?Character_classContext
	    {
	    	return $this->getTypedRuleContext(Character_classContext::class, 0);
	    }

	    public function capture(): ?CaptureContext
	    {
	    	return $this->getTypedRuleContext(CaptureContext::class, 0);
	    }

	    public function non_capture(): ?Non_captureContext
	    {
	    	return $this->getTypedRuleContext(Non_captureContext::class, 0);
	    }

	    public function comment(): ?CommentContext
	    {
	    	return $this->getTypedRuleContext(CommentContext::class, 0);
	    }

	    public function option(): ?OptionContext
	    {
	    	return $this->getTypedRuleContext(OptionContext::class, 0);
	    }

	    public function look_around(): ?Look_aroundContext
	    {
	    	return $this->getTypedRuleContext(Look_aroundContext::class, 0);
	    }

	    public function backreference(): ?BackreferenceContext
	    {
	    	return $this->getTypedRuleContext(BackreferenceContext::class, 0);
	    }

	    public function conditional(): ?ConditionalContext
	    {
	    	return $this->getTypedRuleContext(ConditionalContext::class, 0);
	    }

	    public function backtrack_control(): ?Backtrack_controlContext
	    {
	    	return $this->getTypedRuleContext(Backtrack_controlContext::class, 0);
	    }

	    public function newline_convention(): ?Newline_conventionContext
	    {
	    	return $this->getTypedRuleContext(Newline_conventionContext::class, 0);
	    }

	    public function callout(): ?CalloutContext
	    {
	    	return $this->getTypedRuleContext(CalloutContext::class, 0);
	    }

	    public function Dot(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Dot, 0);
	    }

	    public function Caret(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Caret, 0);
	    }

	    public function StartOfSubject(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::StartOfSubject, 0);
	    }

	    public function WordBoundary(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::WordBoundary, 0);
	    }

	    public function NonWordBoundary(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NonWordBoundary, 0);
	    }

	    public function EndOfSubjectOrLine(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EndOfSubjectOrLine, 0);
	    }

	    public function EndOfSubjectOrLineEndOfSubject(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EndOfSubjectOrLineEndOfSubject, 0);
	    }

	    public function EndOfSubject(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EndOfSubject, 0);
	    }

	    public function PreviousMatchInSubject(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PreviousMatchInSubject, 0);
	    }

	    public function ResetStartMatch(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ResetStartMatch, 0);
	    }

	    public function OneDataUnit(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OneDataUnit, 0);
	    }

	    public function ExtendedUnicodeChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ExtendedUnicodeChar, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitAtom($this);
		    }
		}
	} 

	class Cc_atomContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_cc_atom;
	    }

	    /**
	     * @return array<Cc_literalContext>|Cc_literalContext|null
	     */
	    public function cc_literal(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(Cc_literalContext::class);
	    	}

	        return $this->getTypedRuleContext(Cc_literalContext::class, $index);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    public function shared_atom(): ?Shared_atomContext
	    {
	    	return $this->getTypedRuleContext(Shared_atomContext::class, 0);
	    }

	    public function backreference_or_octal(): ?Backreference_or_octalContext
	    {
	    	return $this->getTypedRuleContext(Backreference_or_octalContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterCc_atom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitCc_atom($this);
		    }
		}
	} 

	class Shared_atomContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_shared_atom;
	    }

	    public function POSIXNamedSet(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::POSIXNamedSet, 0);
	    }

	    public function POSIXNegatedNamedSet(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::POSIXNegatedNamedSet, 0);
	    }

	    public function ControlChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ControlChar, 0);
	    }

	    public function DecimalDigit(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::DecimalDigit, 0);
	    }

	    public function NotDecimalDigit(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NotDecimalDigit, 0);
	    }

	    public function HorizontalWhiteSpace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::HorizontalWhiteSpace, 0);
	    }

	    public function NotHorizontalWhiteSpace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NotHorizontalWhiteSpace, 0);
	    }

	    public function NotNewLine(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NotNewLine, 0);
	    }

	    public function CharWithProperty(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CharWithProperty, 0);
	    }

	    public function CharWithoutProperty(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CharWithoutProperty, 0);
	    }

	    public function NewLineSequence(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NewLineSequence, 0);
	    }

	    public function WhiteSpace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::WhiteSpace, 0);
	    }

	    public function NotWhiteSpace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NotWhiteSpace, 0);
	    }

	    public function VerticalWhiteSpace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::VerticalWhiteSpace, 0);
	    }

	    public function NotVerticalWhiteSpace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NotVerticalWhiteSpace, 0);
	    }

	    public function WordChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::WordChar, 0);
	    }

	    public function NotWordChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NotWordChar, 0);
	    }

	    public function Backslash(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Backslash, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterShared_atom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitShared_atom($this);
		    }
		}
	} 

	class LiteralContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_literal;
	    }

	    public function shared_literal(): ?Shared_literalContext
	    {
	    	return $this->getTypedRuleContext(Shared_literalContext::class, 0);
	    }

	    public function CharacterClassEnd(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CharacterClassEnd, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterLiteral($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitLiteral($this);
		    }
		}
	} 

	class Cc_literalContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_cc_literal;
	    }

	    public function shared_literal(): ?Shared_literalContext
	    {
	    	return $this->getTypedRuleContext(Shared_literalContext::class, 0);
	    }

	    public function Dot(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Dot, 0);
	    }

	    public function CharacterClassStart(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CharacterClassStart, 0);
	    }

	    public function Caret(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Caret, 0);
	    }

	    public function QuestionMark(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QuestionMark, 0);
	    }

	    public function Plus(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Plus, 0);
	    }

	    public function Star(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Star, 0);
	    }

	    public function WordBoundary(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::WordBoundary, 0);
	    }

	    public function EndOfSubjectOrLine(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EndOfSubjectOrLine, 0);
	    }

	    public function Pipe(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Pipe, 0);
	    }

	    public function OpenParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenParen, 0);
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterCc_literal($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitCc_literal($this);
		    }
		}
	} 

	class Shared_literalContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_shared_literal;
	    }

	    public function octal_char(): ?Octal_charContext
	    {
	    	return $this->getTypedRuleContext(Octal_charContext::class, 0);
	    }

	    public function letter(): ?LetterContext
	    {
	    	return $this->getTypedRuleContext(LetterContext::class, 0);
	    }

	    public function digit(): ?DigitContext
	    {
	    	return $this->getTypedRuleContext(DigitContext::class, 0);
	    }

	    public function BellChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::BellChar, 0);
	    }

	    public function EscapeChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EscapeChar, 0);
	    }

	    public function FormFeed(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FormFeed, 0);
	    }

	    public function NewLine(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NewLine, 0);
	    }

	    public function CarriageReturn(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CarriageReturn, 0);
	    }

	    public function Tab(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Tab, 0);
	    }

	    public function HexChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::HexChar, 0);
	    }

	    public function Quoted(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Quoted, 0);
	    }

	    public function BlockQuoted(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::BlockQuoted, 0);
	    }

	    public function OpenBrace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OpenBrace, 0);
	    }

	    public function CloseBrace(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseBrace, 0);
	    }

	    public function Comma(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Comma, 0);
	    }

	    public function Hyphen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hyphen, 0);
	    }

	    public function LessThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LessThan, 0);
	    }

	    public function GreaterThan(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GreaterThan, 0);
	    }

	    public function SingleQuote(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SingleQuote, 0);
	    }

	    public function Underscore(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Underscore, 0);
	    }

	    public function Colon(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Colon, 0);
	    }

	    public function Hash(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Hash, 0);
	    }

	    public function Equals(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Equals, 0);
	    }

	    public function Exclamation(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Exclamation, 0);
	    }

	    public function Ampersand(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Ampersand, 0);
	    }

	    public function OtherChar(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OtherChar, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterShared_literal($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitShared_literal($this);
		    }
		}
	} 

	class NumberContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_number;
	    }

	    public function digits(): ?DigitsContext
	    {
	    	return $this->getTypedRuleContext(DigitsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterNumber($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitNumber($this);
		    }
		}
	} 

	class Octal_charContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_octal_char;
	    }

	    public function Backslash(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::Backslash, 0);
	    }

	    /**
	     * @return array<Octal_digitContext>|Octal_digitContext|null
	     */
	    public function octal_digit(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(Octal_digitContext::class);
	    	}

	        return $this->getTypedRuleContext(Octal_digitContext::class, $index);
	    }

	    public function D0(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D0, 0);
	    }

	    public function D1(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D1, 0);
	    }

	    public function D2(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D2, 0);
	    }

	    public function D3(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D3, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterOctal_char($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitOctal_char($this);
		    }
		}
	} 

	class Octal_digitContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_octal_digit;
	    }

	    public function D0(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D0, 0);
	    }

	    public function D1(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D1, 0);
	    }

	    public function D2(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D2, 0);
	    }

	    public function D3(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D3, 0);
	    }

	    public function D4(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D4, 0);
	    }

	    public function D5(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D5, 0);
	    }

	    public function D6(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D6, 0);
	    }

	    public function D7(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D7, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterOctal_digit($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitOctal_digit($this);
		    }
		}
	} 

	class DigitsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_digits;
	    }

	    /**
	     * @return array<DigitContext>|DigitContext|null
	     */
	    public function digit(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DigitContext::class);
	    	}

	        return $this->getTypedRuleContext(DigitContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterDigits($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitDigits($this);
		    }
		}
	} 

	class DigitContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_digit;
	    }

	    public function D0(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D0, 0);
	    }

	    public function D1(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D1, 0);
	    }

	    public function D2(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D2, 0);
	    }

	    public function D3(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D3, 0);
	    }

	    public function D4(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D4, 0);
	    }

	    public function D5(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D5, 0);
	    }

	    public function D6(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D6, 0);
	    }

	    public function D7(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D7, 0);
	    }

	    public function D8(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D8, 0);
	    }

	    public function D9(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::D9, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterDigit($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitDigit($this);
		    }
		}
	} 

	class NameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_name;
	    }

	    public function alpha_nums(): ?Alpha_numsContext
	    {
	    	return $this->getTypedRuleContext(Alpha_numsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitName($this);
		    }
		}
	} 

	class Alpha_numsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_alpha_nums;
	    }

	    /**
	     * @return array<LetterContext>|LetterContext|null
	     */
	    public function letter(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(LetterContext::class);
	    	}

	        return $this->getTypedRuleContext(LetterContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function Underscore(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(PCREParser::Underscore);
	    	}

	        return $this->getToken(PCREParser::Underscore, $index);
	    }

	    /**
	     * @return array<DigitContext>|DigitContext|null
	     */
	    public function digit(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DigitContext::class);
	    	}

	        return $this->getTypedRuleContext(DigitContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterAlpha_nums($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitAlpha_nums($this);
		    }
		}
	} 

	class Non_close_parensContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_non_close_parens;
	    }

	    /**
	     * @return array<Non_close_parenContext>|Non_close_parenContext|null
	     */
	    public function non_close_paren(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(Non_close_parenContext::class);
	    	}

	        return $this->getTypedRuleContext(Non_close_parenContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterNon_close_parens($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitNon_close_parens($this);
		    }
		}
	} 

	class Non_close_parenContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_non_close_paren;
	    }

	    public function CloseParen(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CloseParen, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterNon_close_paren($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitNon_close_paren($this);
		    }
		}
	} 

	class LetterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex(): int
		{
		    return PCREParser::RULE_letter;
	    }

	    public function ALC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ALC, 0);
	    }

	    public function BLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::BLC, 0);
	    }

	    public function CLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CLC, 0);
	    }

	    public function DLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::DLC, 0);
	    }

	    public function ELC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ELC, 0);
	    }

	    public function FLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FLC, 0);
	    }

	    public function GLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GLC, 0);
	    }

	    public function HLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::HLC, 0);
	    }

	    public function ILC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ILC, 0);
	    }

	    public function JLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::JLC, 0);
	    }

	    public function KLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::KLC, 0);
	    }

	    public function LLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LLC, 0);
	    }

	    public function MLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::MLC, 0);
	    }

	    public function NLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NLC, 0);
	    }

	    public function OLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OLC, 0);
	    }

	    public function PLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PLC, 0);
	    }

	    public function QLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QLC, 0);
	    }

	    public function RLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RLC, 0);
	    }

	    public function SLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SLC, 0);
	    }

	    public function TLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::TLC, 0);
	    }

	    public function ULC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ULC, 0);
	    }

	    public function VLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::VLC, 0);
	    }

	    public function WLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::WLC, 0);
	    }

	    public function XLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::XLC, 0);
	    }

	    public function YLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::YLC, 0);
	    }

	    public function ZLC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ZLC, 0);
	    }

	    public function AUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::AUC, 0);
	    }

	    public function BUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::BUC, 0);
	    }

	    public function CUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::CUC, 0);
	    }

	    public function DUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::DUC, 0);
	    }

	    public function EUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::EUC, 0);
	    }

	    public function FUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::FUC, 0);
	    }

	    public function GUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::GUC, 0);
	    }

	    public function HUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::HUC, 0);
	    }

	    public function IUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::IUC, 0);
	    }

	    public function JUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::JUC, 0);
	    }

	    public function KUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::KUC, 0);
	    }

	    public function LUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::LUC, 0);
	    }

	    public function MUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::MUC, 0);
	    }

	    public function NUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::NUC, 0);
	    }

	    public function OUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::OUC, 0);
	    }

	    public function PUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::PUC, 0);
	    }

	    public function QUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::QUC, 0);
	    }

	    public function RUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::RUC, 0);
	    }

	    public function SUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::SUC, 0);
	    }

	    public function TUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::TUC, 0);
	    }

	    public function UUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::UUC, 0);
	    }

	    public function VUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::VUC, 0);
	    }

	    public function WUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::WUC, 0);
	    }

	    public function XUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::XUC, 0);
	    }

	    public function YUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::YUC, 0);
	    }

	    public function ZUC(): ?TerminalNode
	    {
	        return $this->getToken(PCREParser::ZUC, 0);
	    }

		public function enterRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->enterLetter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener): void
		{
			if ($listener instanceof PCREListener) {
			    $listener->exitLetter($this);
		    }
		}
	} 
}